---
title: "R ile Veri İndirme - DEM Verisi İndirme ve Görselleştirme"
author: "Mehmet Göktuğ Öztürk"
format: html
date: 2025-03-03
description: "R ile Topografik Veri İndirme"
categories:
  - R
  - gis
  - r-spatial
  - base R
image: figs/preview.png
---

![](figs/preview.png)

**Merhabalar, blogun *üçüncü* yazısına hoş geldiniz.** 
**Takıldığınız ve anlamadığınız yerler olursa lütfen yorum yapmaya çekinmeyiniz.** 
**Ayrıca katkılarınızı ve eleştirilerinizi de bekliyorum. Keyifli okumalar.**

Blogdaki son yazımın üzerinden neredeyse 15 ay geçti.
Bu *"kısacık"* zamana nişan, evlilik ve tezi -özellikle de tezi- sıkıştırınca başımı kaşıyacak vakit bile bulamadım.
Ardından da esiri olduğum mükemmelliyetçilik eklenince bu yazının çıkışı bugünü buldu.
Yani anlayacağınız yine bahanelerim var. :) 

Bir önceki yazıda DEM verisi ile basitçe uğraşmıştık. Bu yazıda R kullanarak DEM verisini nasıl indirebileceğimizi göreceğiz. Ardından da `base R` kullanarak Türkiye Topografya Haritası oluşturacağız.  

Bu yazı, öncekilere zıt bir şekilde, kısa ve öz olacak. 

## Yazının Akışı

1.  Paketlerin yüklenmesi
2.  DEM verisinin indirilmesi
3.  Verinin görselleştirilmesi 

## 1. Paketlerin yüklenmesi

Hangi paketleri kullanacağımıza geçmeden önce size R programlama konusunda geçirdiğim zihinsel değişimden bahsetmek istiyorum.
R öğrenmeye başladığımda -olması gerektiği gibi- ilk olarak R programlamanın temellerini öğrenmiş, ardından R ile veri analizine geçmiştim.
Sonrasında arkadaşım ve saygıdeğer hocam İsmail'in (kendisi benim ilk R hocam ve yardımcı tez danışmanım oluyor) önerileriyle `tidyverse` kullanmaya başladım.
`tidyverse`, daha önceki yazılarda da bahsettiğim gibi, veri işlerini kolaylaştıran (bu tartışılabilir) bir paket koleksiyonu. 
İçerisinde [düzenli veri - tidy data](https://r4ds.hadley.nz/data-tidy.html) prensiplerine dayanan, R ile veri işlemeyi standart ve daha kolay bir hâle getiren `ggplot2`, `dplyr`, `readr`, `tidyr`, `tibble` gibi çok sayıda paket bulunuyor. 
O günden bugüne işlerimin büyük bir kısmında bu paketleri kullandım. 
Ta ki geçtiğimiz ocak ayına kadar.
Bu süreç veri analizi konusunda bana çok şey öğretti. 
Düzenli veri prensiplerini ve onları uygulamayı öğrendim. 
R'da en çok kullanılan paketleri barındıran `tidyverse`'yi öğrendim. 
Geçtiğimiz ocak ayında ise programlama konusundaki fikirlerimde bazı değişiklikler oldu ve büyük oranda `base R` kullanmaya başladım.
Bu, `tidyverse`'nin kötü bir paket olduğu manasına gelmiyor tabi ki.
Kendileri oldukça işlevsel bir paket.
Veri işlemede büyük kolaylıklar sağlıyor.
Mesela `ggplot2` yeri kolay kolay doldurulamayacak bir paket.
Ancak R, hâlihazırda veri analizi ve istatistik için geliştirilmiş bir dil ve bu işler için yerli olan çok sayıda fonksiyon barındırıyor.
`base R` kullanarak hiçbir bağımlılık, hiçbir yeni paket gerekmeden birçok işinizi görebilirsiniz.
Hem de `tidyverse`'den daha zor, daha uzun olmayacak bir şekilde.
Ağırlıkla `C` ve `Fortran` gibi dillerle yazılmış bu fonksiyonların birçoğu vektörize ve doğru kullanıldığında *ışık hızında* çalışabiliyor.
Ta ki tekrarlanan işler için döngüler ya da apply() gibi fonksiyonlar kullanana kadar. 
Ben de olabildiğince daha az bağımlıkla çalışmak, R'ın yerli gücünden yararlanmak ve analizin yanı sıra programlamaya da ağırlık vermek amacıyla çoğunlukla `base R` kullanmaya başladım.
Yanlış anlaşılmasın, paket kullanmaya ya da `tidyverse`'ye karşı değilim.
Sadece `base R` ile kolaylıkla yapabileceğim şeyler için neden paket kullanayım?
Eğer `base R` yeterince etkili bir seçenek değilse diğer paketlerden yararlanırım.

Neyse sözü fazla uzattım. Şimdi bu iş için kullanacağımız paketleri yükleyebiliriz.
Eğer bilgisayarınızda yüklü olmayan bir paket varsa `install.packages()` fonksiyonunu kullanarak yükleyebilirsiniz.
Bu sefer hem vektör hem de raster veriler için `terra` paketini kullanacağız.
Ben mekânsal vektör işlerinde genellikle `sf` paktini kullanıyorum ancak `terra` da bunun için bir alternatif. 
Mülki idare sınırları ve sayısal yükseklik modellerine erişmek için de `geodata` paketini kullanacağız. 
Bu paket de `raster`, `terra`, `dismo` gibi birçok önemli R paketini yazan [Robert Hijmans'ın](https://github.com/rhijmans) yazdığı bir paket.

```{r}
#| warning: false
# paketleri R'a yukle
libs <- c(
  "terra",  # mekansal raster ve vektor verileri islemek icin, {raster}'in halefi
  "geodata" # bazi mekansal verilere erismek icin 
)
sapply(libs, require, character.only = TRUE)
```

## 2. DEM verisinin indirilmesi 

DEM verisinden önceki yazıda kısaca bahsetmiştim. 
Tekrardan hatırlamakta fayda var.
[DEM (Digital Elevation Model)](https://en.wikipedia.org/wiki/Digital_elevation_model), kısaca, yeryüzünün yükseklik bilgisini sayısal olarak temsil eden modele verilen isim. 
Her bir grid için, sahip olduğu yükseklik verisini barındırır. 
Topografik ve hidrolojik birçok analizde sıklıkla kullanılıyor. 

Bu yazıda SRTM verisini, `geodata` paketini kullanarak indireceğiz.
Bu paket ile, GADM, SRTM, Worldclim, OSM gibi birçok farklı veriyi kolaylıkla indirebiliriz.

Öncelikle paketin içerdiği fonksiyonlara bir bakalım.
```{r}
ls("package:geodata")
```

Bizim işimize yarayacak fonkiyon `elevation_30s()`.
Ülke kodu için `country` argümanını, DEM verisinin Türkiye sınırlarına göre maskelemek için `mask` argümanını ve veriyi kaydeceğimiz yer için ise `path` argümanını kullanıyoruz. 
Ben `tempfile()` fonksiyonu ile geçici bir dosya oluşturdum.
Dilerseniz yereldeki herhangi bir dizine de kaydedebiliriz.

```{r}
dem <- elevation_30s(country = "TUR", mask = TRUE, path = tempfile())
dem
```

```{r}
nrow(dem) * ncol(dem)
```

Gördüğünüz gibi veri `SpatRaster` sınıfında.
Verinin çıktısında birçok temel bilgiye erişebiliriz.
Satır sayısı 792, sütun sayısı 2340 olan, toplamda 1853280 hücreden oluşuyor.
Çözünürlüğü 0.008333333 derece, yani yaklaşık 1 km diyebiliriz.
Verinin extent'i Türkiye sınırlarını kapsıyor.
Minimum değer -42, ilen maksimum değer 4972. 
Yaklaşık 1 km çözünürlüğe sahip olduğunu düşündüğümüzde neredeyse Ağrı Dağı'nın 5137 metrelik rakımını yakalıyormuş.
Gayet iyi. 

Şimdi basitçe görselleştirelim.

```{r}
plot(dem)
```

Bu hâliyle bile çok güzel görünüyor.

Şimdi de eğim, bakı ve hillshade'i hesaplıyoruz.

```{r}
slp <- terrain(dem, "slope", unit = "radian")
asp <- terrain(dem, "aspect", unit = "radian")
hillshade <- shade(
  slp,
  asp,
  angle = 45,
  direction = 300,
  normalize = TRUE
)
```

Şimdi de bir bakalım nasıl görünüyorlar. 
Daha yüksek çözünürlüklü bir görüntü için `maxcell` argümanıyla oynayacağım.
İşlem biraz yavaşlayabilir.
Çoğu durumda `plot(data)` yeterince iyi sonuç veriyor.

```{r}
plot(slp, maxcell = prod(dim(slp))) # sutun ve satir sayisini carpip hucre sayisini hesapliyorum
```

```{r}
plot(asp, maxcell = prod(dim(asp)))
```

```{r}
plot(hillshade, maxcell = prod(dim(hillshade)), col = grey(0:100/100))
```

Şimdi de mülki idare sınırları için GADM verilerini çekelim.
GADM, Türkiye için sınır çözünürlüğü yüksek olan bir veri değil ancak yüksek sınır doğruluğu gerekmeyen işler için gayet kullanışlı.
Türkiye ve komşu ülkeleri alacağım.
Öncelikle tüm dünya verisini çekiyoruz.
Ardından Türkiye'nin extent'inin koordinatlarına göre kırpıyoruz.

```{r}
adm <- world(resolution = 1, path = tempfile())
ext <- vect(ext(c(25.7, 45.3, 35.5, 42.5)), crs = "EPSG:4326")
adm <- crop(adm, ext)
adm
```

```{r}
plot(adm)
```

## 3. Verinin görselleştirilmesi

Şimdi güzel bir harita oluşturalım.
Yazının en karmaşık kısmı nuhtemelen burası olacak.
Daha önceki yazılarda, R'da grafikler için oldukça standart bir iş akışı sağlayan `ggplot2` paketini kullanarak haritalar çizmiştik.
Bu sefer ise `base R` kullanacağız.
`base R` ile grafik çizdiğimiz zaman ilkin gözümüze yeterince iyi gelmeyebilir ancak biraz tecrübe kazandığımızda ne kadar esnek ve işlevsel olduğunu görebiliriz.
`ggplot2` kadar standart, karmaşık grafiklerde onun kadar kolay bir iş akışı sunmuyor ancak düşünüldüğü kadar zor değil ve çok daha esnek bir yapıya sahip.
Neredeyse dilediğimiz hemen her şeyi çizebiliriz.
Bazen çok az satırla bile süper işler çıkabiliyor.
Bu aşamada yanlış ya da eksik yaptığım şeyler olabilir.
Gözünüze çarparsa yorum yapmaktan çekinmeyin.

Öncelikle Türkiye ve çevre ülkelerin sınırlarının olduğu bir altlık harita çizelim.

```{r}
plot(
  adm,                       # veri
  lwd = 0.8,                 # cizgi kalinligi
  xlim = c(26.1, 44.9),      # x eksinin sinirladigimiz aralik
  ylim = c(35.7, 42.3),      # y eksinin sinirladigimiz aralik
  border = "grey",           # poligon sinirlarinin rengi
  background = "lightblue",  # deniz alanlarinin rengi
  col = "white",             # kara alanlarinin rengi
  axes = TRUE,               # eksenleri cizmek icin
  mar = c(2, 1, 0, 1),       # plot'un marginlerini belirtiyor (alt, sol, ust, sag)
  las = 1                    # en cok gozden kacan nokta, y eksenininin etiketlerini yatay yapiyor
)
```

Şimdi de kabartmasıyla ve konturlarıyla beraber topografik haritamızı çizelim.

```{r}
plot(
  hillshade,
  col = grey(0:100/100),
  maxcell = prod(dim(hillshade)),
  legend = FALSE # rakimin lejantini cizmek icin burada cizmiyoruz
)
plot(
  dem,
  col = terrain.colors(255),
  alpha = 0.5,
  maxcell = prod(dim(dem)),
  add = TRUE,               # ilk plot'un uzerine cizebilmek icin
  legend = TRUE,
  plg = list(               # terra::plot'ta lejant ayarlari icin
    loc = "bottom",         # lejanti asagiya ciz
    size = c(0.6, 0.7),     # lejant boyutu
    cex = 0.8,              # yazi boyutu
    at = seq(0, 4500, 500), # lejant etiketleri
    tic = "out",            # lejanttaki cizgilerin pozisyonu
    title = "m",            # baslik
    title.cex = 0.7         # baslik boyutu
  )
)
contour(
  dem, 
  lwd = 0.35, 
  labcex = 0.38, # label boyutu
  col = scales::alpha("grey40", 0.7), 
  add = TRUE
)
```

Şimdi de iki haritayı birleştirelim.
Bu sefer konturu çizmeyeceğim.

```{r}
plot.new() # yeni bir plot baslatmak icin
par(family = "OpenSans") # font 
plot(
  adm,
  lwd = 0.8,
  xlim = c(26.1, 44.9),
  ylim = c(35.7, 42.3),
  border = "grey",
  background = "lightblue",
  col = "white",
  mar = c(2, 1, 0, 1),
  axes = TRUE,
  las = 1
)
plot(
  hillshade,
  col = grey(0:100/100),
  maxcell = prod(dim(hillshade)),
  legend = FALSE,
  add = TRUE
)
plot(
  dem,
  col = terrain.colors(255),
  alpha = 0.5,
  maxcell = prod(dim(dem)),
  add = TRUE,
  legend = TRUE,
  plg = list(
    loc = "bottom",
    size = c(0.6, 0.7),
    cex = 0.8,
    at = seq(0, 4500, 500),
    tic = "out",
    title = "m",
    cex.main = 0.5
  )
)
plot(adm, border = "grey", lwd = 0.8, add = TRUE) # sinirlari vurgulu cizmek icin tekrar ekledim
```

Fena olmadı. :) 
Biraz daha uğraşla daha iyi haritalar elde edilebilir.
Özellikle de göl ve nehir katmanları eklenirse güzel olacaktır.

Bir sonraki yazıda görüşürüz.

Bilimle ve huzurla kalınız!