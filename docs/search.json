[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "R ve Kuşlar - Ebird Verilerinin R ile Analizi I\n\n\n\n\n\n\n\n\n\n\n\n\nMehmet Göktuğ Öztürk\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Hakkımda",
    "section": "",
    "text": "Merhaba ben Mehmet Göktuğ Öztürk. Kendimi bildim bileli doğayı ve onu şekillendiren dinamikleri gözlemlemeye karşı büyük bir ilgiye sahibim. Doğup, büyüdüğüm evin dışarıdan izole bahçesiyle başlayan doğayla temasım, büyükbabamla gezdiğim Orta Karadeniz meşelikleri ve dedemden dinlediğim yaban hayatı hikâyeleriyle perçinlendi. Bu sayede yolumun düştüğü Hacettepe Üniversitesi Biyoloji Bölümü’nden 2021 yılında mezun oldum. Hacettepe Üniversitesi Fen Bilimleri Enstitüsü Ekoloji Anabilim Dalı’nda, Çağatay Tavşanoğlu danışmanlığında yüksek lisans çalışmamı yürütüyorum. Yüksek lisans çalışmam, yıldırım kökenli orman yangınlarının mekân-zamansal örüntüleri üzerine. Lisans eğitimim boyunca yangın ekolojisi, fonksiyonel bitki karakterleri, göçebe hayvancılık, yırtıcı kuş göçü, üreyen kuşlar ve büyük memeliler üzerine çeşitli projeler kapsamında İç Anadolu, Karadeniz, Akdeniz ve Ege Bölgesi’nde arazi çalışmalarına katıldım. Ekoloji, yaban hayatı, doğa koruma, klimatoloji, meteoroloji, mekânsal veri analizi ve R programlama konularına büyük ilgi duymaktayım. Ayrıca 2011 yılından beri müdavimi olduğum havadelisi.com’un editörlüğünü yapmaktayım.\nBir blog yazma fikri ilk olarak, anadilde bilim anlatıcılığı ve blog kültürü konusunda çok şey öğrendiğim Ozan Mert Göktürk ve meşhur blogu havadelisi ile tanıştığım vakit ortaya çıktı. Yıllar içinde gelişen ilgi alanlarım ve doğayı daha yakından tanıma çabamla beraber bu blogun R ile ilgili olması gerektiğine karar verdim. R, sıkıcı bir anlatımla, veri analizi ve istatistik konularında açık ve tekrarlanabilir bir ortam sağlayan bir programlama dili. Ancak merakınızı cezbedecek bir şeyler söyleyecek olursam, ilgi duyduğunuz alanda bilgiye ulaşmanız ve yeni bilgiler üretmeniz için işinizi çokça kolaylaştıran bir araç. R ile ekoloji, biyoinformatik ve coğrafi bilgi sistemleri (CBS) analizleri yapabilir; uydu görüntülerini işleyebilir; istatistik ve yapay zeka modelleri çalıştırabilir; birbirinden güzel grafikler, haritalar çizebilir; makale, blog ve kitap dahi yazabilirsiniz. Açık kaynaklı olması sebebiyle farklı alanlardan, özellikle de bilim çevrelerinden, binlerce geliştirici sürekli olarak yeni R paketleri geliştirmektedir. 17.04.2023 tarihi itibariyle 19 binden fazla R paketi mevcutmuş.\nBu blogda daha çok R ile ekoloji, biyocoğrafya, iklimbilim konularındaki verilerle ilgilenecek, veri manipülasyonu, analizler, görselleştirmeler yapacağız. Özellikle de mekânsal analizler üzerine yoğunlaşacağımızı düşünüyorum. R’ın yanı sıra Python, Bash gibi dillerle de çeşitli içerikler oluşturacağız. Bol tartışmalı, hep birlikte öğreneceğimiz içeriklere…\nBilimle ve huzurla kalınız."
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html",
    "href": "posts/ebird_R/ebird_r.html",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "",
    "text": "Merhabalar, blogun ilk yazısına hoş geldiniz. Temel bilgiler içeren yazılar da olacak ancak blog içeriklerinin çoğunun bu gibi vaka örneklerinden oluşacağını düşünüyorum. Takıldığınız ve anlamadığınız yerler olursa lütfen yorum yapmaya çekinmeyiniz. Ayrıca katkılarınızı ve eleştirilerinizi de bekliyorum. Keyifli okumalar.\nLisansa başladığım yıllarda arazi çalışmaları için can atan, lablardan ve her türlü veri işinden kaçan biriydim. Doğayı gözlemlemeyi; kuş ve memeli arazilerine gitmeyi çok seviyor, bu konularda yapacağım bilimsel çalışmaları düşlüyordum. Ancak korkunun ecele faydası yokmuş. Doğadaki gözlemlerimizden anlamlı bilgiler çıkartmanın yolu veriden geçiyormuş. 😅 Veriyi, münasebetimiz arttıkça sevmeye başladım. Ama öyle zorunluluktan sevmek falan değil. İçine girdikçe ne kadar haz veren bir uğraş olduğunu keşfettim. İstatistik ve veri analizi, rakamlardan ibaret değil, hayatın her yerinde. Onu sevelim, koruyalım. :) Neyse lafı fazla uzatmadan konuya döneyim.\nBu blog yazısında, R programlama dilini kullanarak kuş verilerinin nasıl işlendiğini göstereceğim. Yazının uzunluğu korkutmasın! Sadece azıcık bir ilgi ve temel R ile GIS bilgisi yeterli olacak. Kuşlara ilginiz olmasa bile, bu yazının bazı temel mekânsal analizleri öğrenmek için faydalı olacağını düşünüyorum. Takıldığınız her noktada çekinmeden yorum yapabilirsiniz.\nSize iki ana soru sunuyorum:\n\nTürkiye’deki iller bazında kuş türü çeşitliliği nasıl bir dağılıma sahip?\nBilindiği gibi Kızılcahamam, Türkiye’deki en önemli kara akbaba - Aegypius monachus popülasyonlarından birisini barındırıyor. Bu türün, Kızılcahamam ilçe sınırları içerisinde nasıl bir dağılımı vardır? Türün dağılımıyla çevresel faktörler arasındaki ilişki kabaca nasıldır?\n\nBu yazıda yalnızca birinci soruya odaklanacağız. İkinci soru için ikinci yazıyı bekleyiniz lütfen. :)\n\n\nYazının Akışı\nYazının genel akışı aşağıdaki gibidir:\n\nGerekli paketlerin yüklenmesi\nKuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nKuş verisinin mekânsallıştırılması\nTR il katmanının yüklenmesi\nKuş verisinin gruplanıp özetlenmesi\nHer bir il sınırı içinde kalan tür sayısının hesaplanması\nVerinin görselleştirilmesi\n\n\n\n1. Gerekli paketlerin yüklenmesi\n\n\n\n\n\n\n\n\n\nPaket\nAçıklama\n\n\n\n\ntidyverse\nÇoğunlukla veri manipülasyonu ve görselleştirme üzerine paketler içeren bir paket koleksiyonu\n\n\nsf\nSimple Features: Mekânsal vektör verileri işlemek için\n\n\nrgeoboundaries\nMülki idare sınırlarını indirmek için\n\n\n\n\n\nEğer bu paketler kurulu değilse aşağıdaki kod bloğu ile kurabilirsiniz. Bu kod bloğu, paketi R’a yüklemeye çalışacak, eğer yükleyemezse kuracaktır. Eğer kurulumda sıkıntı yaşarsanız paketlerin dökümantasyonuna bakabilirsiniz.\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"sf\")) install.packages(\"sf\")\nif (!require(\"rgeoboundaries\")) install.packages(\"rgeoboundaries\")\n\nEğer paketler kuruluysa, bu paketleri library() fonksiyonu ile yükleyebiliriz.\n\nlibrary(tidyverse) # bircok veri isini kolaylastirmak icin\nlibrary(sf) # r'da mekansal vektor verileri islemek icin\nlibrary(rgeoboundaries) # tr il sinirlarina erismek icin\n\n\n\n2. Kuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nYazımızdaki ilk soruya cevap verebilmek için iki temel veriye ihtiyacımız var. Bunlar kuş ve Türkiye’nin il sınırları verileri.\nKuş verisini eBird veri tabanından alacağız. eBird, Türkiye ve dünyadaki en kapsamlı kuş gözlem veri tabanı. Kuş gözlemcileri araziye çıktıklarında gözlemledikleri kuşları bu veri tabanına kaydediyor, bu şekilde bilime ve doğa korumaya katkı sağlayabiliyorlar.\neBird verilerini siteye üye olduktan sonra, en altta, Bilim başlığı altındaki Veri indirme talebi sayfasından ya da {rebird} paketini kullanarak indirebilirsiniz. Ben, site üzerinden tüm Türkiye verilerini indirdim.\nİlk adım olarak indirdiğimiz eBird verisini R’a yükleyelim. Bu veri txt formatında olduğu için, {tidyverse} paket grubuna ait read_delim() fonksiyonunu kullandık. Base R’daki read.table() fonksiyonu da bu iş için kullanılabilir. Veri biraz büyük olduğundan yüklenmesi ve işlenmesi biraz zaman alabilir.\n\nebird &lt;- read_delim(\"./ebird/ebd_TR_relApr-2023.txt\")\n\n\nprint(ebird)\n\n# A tibble: 2,403,720 × 50\n   `GLOBAL UNIQUE IDENTIFIER`     `LAST EDITED DATE`  `TAXONOMIC ORDER` CATEGORY\n   &lt;chr&gt;                          &lt;dttm&gt;                          &lt;dbl&gt; &lt;chr&gt;   \n 1 URN:CornellLabOfOrnithology:E… 2021-04-15 12:59:44             10043 species \n 2 URN:CornellLabOfOrnithology:E… 2021-04-15 12:58:56              5625 species \n 3 URN:CornellLabOfOrnithology:E… 2021-04-15 13:04:32              1361 species \n 4 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:13             22215 species \n 5 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32              5787 species \n 6 URN:CornellLabOfOrnithology:E… 2021-04-21 02:26:13             29239 species \n 7 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:35             22156 species \n 8 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32               291 species \n 9 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n10 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n# ℹ 2,403,710 more rows\n# ℹ 46 more variables: `TAXON CONCEPT ID` &lt;chr&gt;, `COMMON NAME` &lt;chr&gt;,\n#   `SCIENTIFIC NAME` &lt;chr&gt;, `SUBSPECIES COMMON NAME` &lt;chr&gt;,\n#   `SUBSPECIES SCIENTIFIC NAME` &lt;chr&gt;, `EXOTIC CODE` &lt;chr&gt;,\n#   `OBSERVATION COUNT` &lt;chr&gt;, `BREEDING CODE` &lt;chr&gt;,\n#   `BREEDING CATEGORY` &lt;chr&gt;, `BEHAVIOR CODE` &lt;chr&gt;, `AGE/SEX` &lt;chr&gt;,\n#   COUNTRY &lt;chr&gt;, `COUNTRY CODE` &lt;chr&gt;, STATE &lt;chr&gt;, `STATE CODE` &lt;chr&gt;, …\n\n\nVerimizi R’a yükledikten sonra print() fonksiyonu ile veri setimizin temel yapısına bir göz attık. 2,403,720 gözlem (satır) ve 50 değişkene (sütun) sahip bir tibble karşımıza çıktı. tibble, {tidyverse}’e özel klasik data.frame’den daha kullanışlı bir veri yapısıdır. Özel bir data.frame diyebiliriz. Ancak bu kadar fazla değişkenimiz varken print() fonksiyonu yeterince işlevsel değil. Verinin büyük bir kısmını göremiyoruz. Bu sebeple, R’a yüklediğimiz veri tablosunun tüm sütunlarını ve onların yapılarını görmek için glimpse() fonksiyonunu kullanacağız. Bu fonksiyon, base R’daki str() fonksiyonuna benziyor ancak tibble veri yapısıyla kullanılırken daha sade ve kullanışlı. Özetle, bu fonksiyonu, print() fonksiyonunun transpoze edilmiş hâli olarak görebilirsiniz.\n\nglimpse(ebird)\n\nRows: 2,403,720\nColumns: 50\n$ `GLOBAL UNIQUE IDENTIFIER`   &lt;chr&gt; \"URN:CornellLabOfOrnithology:EBIRD:OBS112…\n$ `LAST EDITED DATE`           &lt;dttm&gt; 2021-04-15 12:59:44, 2021-04-15 12:58:56…\n$ `TAXONOMIC ORDER`            &lt;dbl&gt; 10043, 5625, 1361, 22215, 5787, 29239, 22…\n$ CATEGORY                     &lt;chr&gt; \"species\", \"species\", \"species\", \"species…\n$ `TAXON CONCEPT ID`           &lt;chr&gt; \"avibase-4F404CB9\", \"avibase-77845DAD\", \"…\n$ `COMMON NAME`                &lt;chr&gt; \"Indian Roller\", \"Siberian Crane\", \"Black…\n$ `SCIENTIFIC NAME`            &lt;chr&gt; \"Coracias benghalensis\", \"Leucogeranus le…\n$ `SUBSPECIES COMMON NAME`     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SUBSPECIES SCIENTIFIC NAME` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EXOTIC CODE`                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `OBSERVATION COUNT`          &lt;chr&gt; \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"…\n$ `BREEDING CODE`              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BREEDING CATEGORY`          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BEHAVIOR CODE`              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `AGE/SEX`                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ COUNTRY                      &lt;chr&gt; \"Türkiye\", \"Türkiye\", \"Türkiye\", \"Türkiye…\n$ `COUNTRY CODE`               &lt;chr&gt; \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\",…\n$ STATE                        &lt;chr&gt; \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbu…\n$ `STATE CODE`                 &lt;chr&gt; \"TR-41\", \"TR-06\", \"TR-34\", \"TR-34\", \"TR-3…\n$ COUNTY                       &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `COUNTY CODE`                &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `IBA CODE`                   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BCR CODE`                   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `USFWS CODE`                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `ATLAS BLOCK`                &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ LOCALITY                     &lt;chr&gt; \"Haydarpasa-Izmit Yolu\", \"Ankara\", \"Istan…\n$ `LOCALITY ID`                &lt;chr&gt; \"L14466142\", \"L14465903\", \"L14465858\", \"L…\n$ `LOCALITY TYPE`              &lt;chr&gt; \"P\", \"P\", \"P\", \"H\", \"H\", \"H\", \"P\", \"H\", \"…\n$ LATITUDE                     &lt;dbl&gt; 40.78331, 39.92951, 41.00805, 40.99209, 3…\n$ LONGITUDE                    &lt;dbl&gt; 29.47437, 32.85443, 28.97673, 28.83948, 3…\n$ `OBSERVATION DATE`           &lt;date&gt; 1875-06-01, 1879-04-01, 1890-12-01, 1896…\n$ `TIME OBSERVATIONS STARTED`  &lt;time&gt;       NA,       NA,       NA,       NA, …\n$ `OBSERVER ID`                &lt;chr&gt; \"obsr1979154\", \"obsr1979154\", \"obsr197915…\n$ `SAMPLING EVENT IDENTIFIER`  &lt;chr&gt; \"S85596027\", \"S85594679\", \"S85597213\", \"S…\n$ `PROTOCOL TYPE`              &lt;chr&gt; \"Historical\", \"Historical\", \"Historical\",…\n$ `PROTOCOL CODE`              &lt;chr&gt; \"P62\", \"P62\", \"P62\", \"P62\", \"P62\", \"P62\",…\n$ `PROJECT CODE`               &lt;chr&gt; \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIR…\n$ `DURATION MINUTES`           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT DISTANCE KM`         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT AREA HA`             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `NUMBER OBSERVERS`           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 1, 1, 1, …\n$ `ALL SPECIES REPORTED`       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `GROUP IDENTIFIER`           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `HAS MEDIA`                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ APPROVED                     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REVIEWED                     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REASON                       &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `TRIP COMMENTS`              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SPECIES COMMENTS`           &lt;chr&gt; \"Collected (Sclator & Taylor, 1876)., Kir…\n$ ...50                        &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nBu fonksiyon sayesinde sütunları çok daha rahat bir şekilde görebiliyoruz. Gördüğünüz gibi bu yazı için işimize yaramayacak olan bir sürü sütun var. Kalabalıkta kaybolmamak için yalnızca işimize yarayabilecek sütunları seçelim. Ardından da sadece tür kaydı olan gözlemleri seçmek için species’e göre filtreleyelim.\n\nebird_subset &lt;- ebird |&gt;\n  select(4, 6, 7, 11, 12, 18, 29, 30) |&gt;  # burada indeks kullanarak sectik, sutun isimleriyle de secebiliriz\n  filter(CATEGORY == \"species\")\nebird_subset\n\n# A tibble: 2,298,920 × 8\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n   &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;          \n 1 species  Indian Roller  Coracias benghal… 1                   &lt;NA&gt;           \n 2 species  Siberian Crane Leucogeranus leu… X                   &lt;NA&gt;           \n 3 species  Black Grouse   Lyrurus tetrix    X                   &lt;NA&gt;           \n 4 species  White-winged … Alauda leucoptera 1                   &lt;NA&gt;           \n 5 species  White-tailed … Vanellus leucurus 2                   &lt;NA&gt;           \n 6 species  Mourning Whea… Oenanthe lugens   1                   &lt;NA&gt;           \n 7 species  Black Lark     Melanocorypha ye… 1                   &lt;NA&gt;           \n 8 species  Brant          Branta bernicla   1                   &lt;NA&gt;           \n 9 species  Slender-bille… Numenius tenuiro… 2                   &lt;NA&gt;           \n10 species  Slender-bille… Numenius tenuiro… 1                   &lt;NA&gt;           \n# ℹ 2,298,910 more rows\n# ℹ 3 more variables: STATE &lt;chr&gt;, LATITUDE &lt;dbl&gt;, LONGITUDE &lt;dbl&gt;\n\n\n\nglimpse(ebird_subset)\n\nRows: 2,298,920\nColumns: 8\n$ CATEGORY            &lt;chr&gt; \"species\", \"species\", \"species\", \"species\", \"speci…\n$ `COMMON NAME`       &lt;chr&gt; \"Indian Roller\", \"Siberian Crane\", \"Black Grouse\",…\n$ `SCIENTIFIC NAME`   &lt;chr&gt; \"Coracias benghalensis\", \"Leucogeranus leucogeranu…\n$ `OBSERVATION COUNT` &lt;chr&gt; \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\", …\n$ `BREEDING CODE`     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ STATE               &lt;chr&gt; \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbul\", \"Hata…\n$ LATITUDE            &lt;dbl&gt; 40.78331, 39.92951, 41.00805, 40.99209, 36.35517, …\n$ LONGITUDE           &lt;dbl&gt; 29.47437, 32.85443, 28.97673, 28.83948, 36.31517, …\n\n\nGördüğünüz gibi verinin işimize yarayacak bir alt kümesini aldık, kalabalıktan kurtulduk.\nArtık ilk yüklediğimiz veriyi (ebird) R’dan silebiliriz. Veri, tüm TR’yi kapsadığı için 2 milyondan fazla gözlem içeriyor. Büyük veri setleri RAM’in şişmesine ve R’ın çökmesine sebep olabilir. Bu sebeple artık işimize yaramayacak olan verileri environment’ten kaldıralım.\n\nrm(ebird)\n\n\n\n3. Kuş verisinin mekânsallıştırılması\nKuş verisinin ihtiyacımız olan alt kümesini aldıktan sonra sıra geldi verimizi mekânsallaştırmaya. Verimizi, uygun mekânsal veri tipine dönüştürüp, mekânsal analizlerde kullanılabilecek bir hâle getireceğiz. Bunun için, R’da mekânsal vektör verileri işlemek için geliştirilen {sf} paketini kullanacağız.\nLat long verisini ve koordinat sistemini tanımlayarak eBird verisini sf objesine dönüştürelim.\n\nebird_sf &lt;- st_as_sf(\n    ebird_subset, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = \"EPSG:4326\"\n)\nebird_sf\n\nSimple feature collection with 2298920 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 2,298,920 × 7\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n * &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;          \n 1 species  Indian Roller  Coracias benghal… 1                   &lt;NA&gt;           \n 2 species  Siberian Crane Leucogeranus leu… X                   &lt;NA&gt;           \n 3 species  Black Grouse   Lyrurus tetrix    X                   &lt;NA&gt;           \n 4 species  White-winged … Alauda leucoptera 1                   &lt;NA&gt;           \n 5 species  White-tailed … Vanellus leucurus 2                   &lt;NA&gt;           \n 6 species  Mourning Whea… Oenanthe lugens   1                   &lt;NA&gt;           \n 7 species  Black Lark     Melanocorypha ye… 1                   &lt;NA&gt;           \n 8 species  Brant          Branta bernicla   1                   &lt;NA&gt;           \n 9 species  Slender-bille… Numenius tenuiro… 2                   &lt;NA&gt;           \n10 species  Slender-bille… Numenius tenuiro… 1                   &lt;NA&gt;           \n# ℹ 2,298,910 more rows\n# ℹ 2 more variables: STATE &lt;chr&gt;, geometry &lt;POINT [°]&gt;\n\n\nVerimizi sf formatına dönüştürdüğümüzde, bazı önemli mekânsal özelliklerin eklenmiş olduğunu görüyoruz. Bunlar arasında geometri tipi (POINT), veri boyutu (dimension), verinin coğrafi sınırlarını tanımlayan bounding box koordinatları ve koordinat referans sistemi (CRS) bulunuyor. Bundan sonra mekânsal analizleri rahatça yapabiliriz.\nDikkat ederseniz verinin her bir satırı, bir koordinat çiftiyle ilişkili. Bu, her bir satırın ve bu satırdaki tüm bilgilerin, bir geometriyle ilişkili olduğunu gösteriyor. Bu geometri de, geometri tipinde belirtildiği ya da bir koordinat çiftinin varlığından anlayabileceğimiz gibi nokta. Yani 2,298,920 tane noktamız var ve her bir nokta bir gözlemle ilişkili.\n\n\n4. TR il katmanının yüklenmesi\neBird verisini mekânsallaştırdığımıza göre sıra geldi TR il sınırlarını R’a yüklemeye. Ben geoBoundaries veri tabanını kullanıyorum. İhtiyaç duyduğunuz mülki idare sınırları verisinine erişmek için bu linki ya da {rgeoboundaries} paketini kullanabilirsiniz.\n\ntr_il &lt;- gb_adm1(country = \"Turkey\", type = \"SSCGS\") # type = \"SSCGS\" argumaniyla basitlestirilmiş versiyonunu indiriyoruz\ntr_il\n\nSimple feature collection with 81 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25.66545 ymin: 35.80768 xmax: 44.81766 ymax: 42.1048\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeGroup shapeType      shapeName shapeISO                 shapeID\n1         TUR      ADM1          Adana    TR-01 25984515B95172477822815\n2         TUR      ADM1       Adıyaman    TR-02 25984515B90872828599679\n3         TUR      ADM1 Afyonkarahisar    TR-03 25984515B26209284550223\n4         TUR      ADM1           Ağrı    TR-04 25984515B39003465173278\n5         TUR      ADM1         Amasya    TR-05 25984515B32583172380009\n6         TUR      ADM1        Antalya    TR-07 25984515B97476213604692\n7         TUR      ADM1         Artvin    TR-08  25984515B1602304411378\n8         TUR      ADM1          Aydın    TR-09 25984515B63739470532168\n9         TUR      ADM1      Balıkesir    TR-10 25984515B55384476443375\n10        TUR      ADM1         Ankara    TR-06 25984515B47806653651907\n   shapeCanonical                       geometry\n1        province MULTIPOLYGON (((34.91146 36...\n2        province MULTIPOLYGON (((37.861 37.4...\n3        province MULTIPOLYGON (((30.48061 38...\n4        province MULTIPOLYGON (((43.77542 39...\n5        province MULTIPOLYGON (((36.3878 40....\n6        province MULTIPOLYGON (((30.40305 36...\n7        province MULTIPOLYGON (((41.87016 40...\n8        province MULTIPOLYGON (((27.33197 37...\n9        province MULTIPOLYGON (((26.7224 39....\n10       province MULTIPOLYGON (((31.96673 38...\n\n\nBase R plot() fonksiyonu ile tr_il objemizi çizelim.\n\nplot(tr_il)\n\n\n\n\n\n\n\n\nGördüğünüz gibi sf objesi için plot() fonksiyonu, tüm değişkenleri (sütunları) çiziyor. Sadece shapeName değişkenini seçip, eksenleri ve başlığı ekleyerek daha iyi bir Türkiye il sınırları haritası çizelim.\n\nplot(tr_il[, \"shapeName\"], graticule = TRUE, axes = TRUE, main = \"Türkiye Haritası\")\n\n\n\n\n\n\n\n\nHop! Çok daha iyi!\nArtık kuş verimizin Türkiye üzerindeki dağılımını incelemeye başlama vakti geldi. Ancak 2 milyondan fazla satırı olan bir verinin grafiğini çizmek muhtemelen R’ın çökmesiyle sonuçlanacaktır. Bu yüzden bu verinin bir alt kümesini alalım.\n\nebird_sample &lt;- sample_n(ebird_sf, 500000)\n\nVeri tablomuzdan rastgele 500000 satır seçtik. Bu sayı bilgisayarınız için fazla geliyorsa 5-10b de seçebilirsiniz.\nVerimizi, bu sefer de R’ın vazgeçilmez paketi olan {ggplot2} ile görselleştirelim. ggplot2, çizeceğimiz verileri katman katman belirtip + ile birbirine bağlamamıza izin veren oldukça esnek bir paket. Şimdi haritamızı çizelim.\n\nggplot() +                                       # grafigi baslatiyor\n  geom_sf(data = tr_il, aes()) +                 # tr katmanini ekliyoruz\n  geom_sf(data = ebird_sample, aes(), size = .5) # kus verimizi ekliyoruz\n\n\n\n\n\n\n\n\n500000 kuş gözlem verisinin Türkiye’deki dağılımı bu şekildeymiş. Bu grafiğe dayanarak, ülkenin batısında ve büyükşehirlerde daha çok gözlem olduğunu söyleyebiliriz. Bu genel dağılımı gördüğümüze göre merak ettiğim 2 türün dağılımına bakmak istiyorum. Veriyi tür ismine göre filtreleyip haritayı çiziyoruz.\n\nSakallı Akbaba\n\n\n\nAlbum of Abyssinian birds and mammals | Chicago :Field Museum of Natural History,1930.\n\n\nSakallı akbaba - Gypaetus barbatus, sarp dağların insandan uzak köşelerinde; genellikle kanyonlar ve derin yarlarda yaşayan bir akbaba türü. Kendine has görünüşü ve diyetinin kemikten oluşması sebebiyle oldukça ilgi çekici bir tür. Nesli tehdit altındaki bu nadir türün Türkiye’deki dağılımına bir bakalım.\n\nsakalli &lt;- ebird_sf |&gt; \n  filter(`SCIENTIFIC NAME` == \"Gypaetus barbatus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = sakalli, aes(), size = .7)\n\n\n\n\n\n\n\n\nGördüğünüz gibi sakallı akbabanın Türkiye’deki dağılımı Köroğlu Dağları, Aladağlar, Kaçkar Dağları, Akdağ gibi dağlık alanlarda yoğunlaşıyor.\n\n\nKızıl Akbaba\n\n\n\nColoured figures of the birds of the British Islands. v.1 | London :R. H. Porter,1885-1897.\n\n\nKızıl akbaba - Gyps fulvus da dağları tercih eden ve kayalıklarda yuvalayan bir tür. Kızıl akbaba, sakallı akbaba kadar çekingen olmayan, genellikle koloni hâlinde yaşayan bir tür. Şimdi de kızıl akbabanın dağılımına bir bakalım. Acaba nerelerden kayıtlar gelmiş!\n\nkizil &lt;- ebird_sf |&gt; \n  filter(`SCIENTIFIC NAME` == \"Gyps fulvus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = kizil, aes(), size = .7)\n\n\n\n\n\n\n\n\nKızıl akbaba dağılımının, üreme ve göç bölgelerinde yoğunlaşan bir örüntü sergilediğini görebiliyoruz.\n\n\n\n5. Kuş verisinin gruplanıp özetlenmesi\nBiraz oyalanmanın ardından tekrardan sorumuza odaklanabiliriz. Öncelikle Türkiye’deki kuş türlerini ve her türden kaç adet kayıt olduğunu görmek için kuş verisini tür ismine göre gruplayıp, kayıt sayısına göre özetleyelim. Bu işlem biraz uzun sürebilir.\n\nebird_grouped &lt;- ebird_sf |&gt;\n  group_by(`SCIENTIFIC NAME`) |&gt;\n  summarise(n = n())\nprint(ebird_grouped)\n\nSimple feature collection with 503 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 503 × 3\n   `SCIENTIFIC NAME`             n                                      geometry\n   &lt;chr&gt;                     &lt;int&gt;                                &lt;GEOMETRY [°]&gt;\n 1 Acanthis flammea              1                     POINT (32.87976 39.96636)\n 2 Accipiter badius              3 MULTIPOINT ((41.23051 37.10523), (39.85856 4…\n 3 Accipiter brevipes         2157 MULTIPOINT ((26.218 40.00467), (26.20626 40.…\n 4 Accipiter gentilis         1617 MULTIPOINT ((26.16617 39.819), (26.20626 40.…\n 5 Accipiter nisus           17281 MULTIPOINT ((26.01417 39.80894), (25.89106 4…\n 6 Acridotheres tristis        792 MULTIPOINT ((28.56435 41.1764), (28.61338 40…\n 7 Acrocephalus agricola       355 MULTIPOINT ((42.41 38.7), (42.42388 38.70286…\n 8 Acrocephalus arundinaceus  6899 MULTIPOINT ((25.89106 40.15504), (26.16617 3…\n 9 Acrocephalus dumetorum       25 MULTIPOINT ((35.95475 36.06548), (39.72347 4…\n10 Acrocephalus griseldis        1                       POINT (43.578 40.11865)\n# ℹ 493 more rows\n\n\n\nglimpse(ebird_grouped)\n\nRows: 503\nColumns: 3\n$ `SCIENTIFIC NAME` &lt;chr&gt; \"Acanthis flammea\", \"Accipiter badius\", \"Accipiter b…\n$ n                 &lt;int&gt; 1, 3, 2157, 1617, 17281, 792, 355, 6899, 25, 1, 2164…\n$ geometry          &lt;GEOMETRY [°]&gt; POINT (32.87976 39.96636), MULTIPOINT ((41.…\n\n\nGördüğünüz gibi eBird veri tabanında Türkiye’den kayıtlı 503 tür varmış. eBird’ün internet sitesinde ise 494 adet tür gösteriyor. Bu farklılığın sebebi nedir bilmiyorum doğrusu. Aklıma, kesin olmayan bazı kayıtların da olabileceği geliyor sadece. Bilenler açıklayabilirse süper olur.\n\n\n6. Her bir il sınırı içinde kalan tür sayısının hesaplanması\nŞimdi, Türkiye’deki her bir ilin sınırları içine düşen kuş gözlem noktalarını sayacağız. Yani her bir poligonun içindeki noktaları sayacağız. Bu da bize her bir ildeki toplam tür sayısını verecek. Öncelikle st_intersects() fonksiyonu ile her bir il ile kesişen noktaları belirliyoruz. Ardından lengths() fonksiyonu ile her bir ilde kaç adet nokta olduğunu hesaplıyoruz ve bunu, tr_il verisine yeni bir sütun olarak ekliyoruz. Temelde çok basit bir işlem ama başta anlamak zor olabiliyor.\n\ntr_il$bird_count &lt;- lengths(st_intersects(tr_il, ebird_grouped))\n\n\n\n7. Verinin görselleştirilmesi\nŞimdi, hızlıca bir plotlayalım. Bunun için plot() fonksiyonunu kullacağız. tr_il içindeki bird_count sütununu seçelim.\n\nplot(tr_il[, \"bird_count\"])\n\n\n\n\n\n\n\n\nHaritamız hazır. Şimdi daha iyi bir görselleştirme için ggplot() fonksiyonunu kullanalım.\nÖncelikle kırılımlarımızı belirleyelim ki haritamız daha güzel görünsün. Bunun için jenks optimizasyonunu kullanacağız.\n\nbreaks &lt;- classInt::classIntervals(\n  tr_il$bird_count,\n  n = 7,\n  style = \"jenks\"\n)\n\n\nggplot() +                                     # grafigi baslatiyor\n  geom_sf(\n    data = tr_il,                              # tr katmanini ekliyoruz\n    aes(fill = bird_count),                    # renkleri kus turu sayisina gore seciyoruz\n    colour = \"grey12\",                         # il sinirlarinin rengini belirliyoruz\n    linewidth = .1                             # il sinirlarinin kalinligini belirliyoruz\n  ) +\n  scale_fill_viridis_c(breaks = breaks$brks) + # haritamizi viridis paletiyle dolduruyoruz\n  guides(                                      # lejant ozelliklerini seciyoruz\n    fill = guide_colorsteps(\n      barwidth = 20,\n      barheight = .5,\n      title.position = \"right\"\n    )\n  ) +\n  labs(                                        # etiketleri yaziyoruz\n    title = \"İllere Göre Kuş Türü Sayısı\",\n    x = \"Boylam\",\n    y = \"Enlem\"\n  ) +\n  theme_bw() +                                 # tema seciyoruz\n  theme(                                       # temanın ozellliklerini berlirliyoruz\n    legend.position = \"bottom\",\n    plot.background = element_rect(\"white\", colour = \"white\"),\n    text = element_text(family = \"Ubuntu Mono\"),\n    legend.title = element_blank()\n  )\n\n\n\n\n\n\n\n\nGördüğünüz gibi çok daha iyi bir görselleştirme oldu. Şu an elimizde, Türkiye’deki illere göre kuş türü sayısını gösteren bir harita bulunmakta. Ancak bu harita üzerinden yapacağımız yorumlarda dikkatli olmamız gereken birkaç önemli nokta var. İl yüzölçümünün ve illere göre gözlem sayısının farklı olmasından kaynaklanan yanlılık (bias) potansiyeli. Bu harita genel fikirler verebilir ancak net çıkarımlar için verinin standartlaştırılması ve istatistiki testlere tabi tutulması önem arz etmektedir.\nİkinci yazıda görüşmek dileğiyle.\nBilimle ve huzurla kalınız."
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#türkiyede-illere-göre-toplam-kuş-türü-sayısı-nasıl-bir-dağılım-gösteriyor",
    "href": "posts/ebird_R/ebird_r.html#türkiyede-illere-göre-toplam-kuş-türü-sayısı-nasıl-bir-dağılım-gösteriyor",
    "title": "R ve Kuşlar - Ebird Verilerinin R ile Analizi I",
    "section": "1. Türkiye’de, illere göre toplam kuş türü sayısı nasıl bir dağılım gösteriyor?",
    "text": "1. Türkiye’de, illere göre toplam kuş türü sayısı nasıl bir dağılım gösteriyor?\nBu soruya cevap verebilmek için öncelikle iki temel veriye ihtiyacımız var. Bunlardan birisi kuş, diğeri ise Türkiye’deki iller. Eğer elimizdeki kuş verisinde her bir tür için kaydedildiği il bilgisi varsa, illere göre kuş türlerini gruplayıp, kuş türü sayısını bulacak şekilde özetleyebiliriz. Bu, aşina olanlar için, Excel’deki pivot table’a benziyor. Ancak bu yöntemle mekânsal bir veri elde edemeyiz. Bu işlemin ardından kuş verisinin, Türkiye illeri katmanına, il isimlerine göre bağlanması gerekir. Hâlihazırda kuşların kaydedildiği noktaların koordinatları olduğundan, mekânsal olarak işleyeceğiz. Zaten koordinata göre toplanan verilerin mekansâl olarak işlenmesi daha güvenli.\n\nYazının Akışı\nYazının genel akışı aşağıdaki gibidir:\n\nGerekli paketlerin yüklenmesi\nKuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nKuş verisinin mekânsallıştırılması\nTR il katmanının yüklenmesi\nKuş verisinin gruplanıp özetlenmesi\nHer bir il sınırı içinde kalan tür sayısının hesaplanması\nVerinin görselleştirilmesi\n\n\n\n1. Gerekli paketlerin yüklenmesi\n\n\n\n\n\n\n\n\n\nPaket\nAçıklama\n\n\n\n\ntidyverse\nÇoğunlukla veri manipülasyonu ve görselleştirme üzerine paketler içeren bir paket koleksiyonu\n\n\nsf\nSimple Features: Mekânsal vektör verileri işlemek için\n\n\nrgeoboundaries\nMülki idare sınırlarını indirmek için\n\n\ntmap\nGüzel haritalar çizmek için\n\n\n\n\n\nEğer bu paketler kurulu değilse aşağıdaki kod bloğu ile kurabilirsiniz. Bu kod bloğu, paketi R’a yüklemeye çalışacak, eğer yükleyemezse kuracaktır. Eğer kurulumda sıkıntı yaşarsanız paketlerin dökümantasyonuna bakabilirsiniz.\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"sf\")) install.packages(\"sf\")\nif (!require(\"rgeoboundaries\")) install.packages(\"rgeoboundaries\")\nif (!require(\"tmap\")) install.packages(\"tmap\")\n\nEğer paketler kuruluysa library() fonksiyonu ile yükleyebiliriz.\n\nlibrary(tidyverse) # bircok veri isini kolaylastirmak icin\nlibrary(sf) # r'da mekansal vektor verileri islemek icin\nlibrary(rgeoboundaries) # tr il sinirlarina erismek icin\nlibrary(tmap) # guzel haritalar cizmek icin \n\nKuş verisi olarak, Türkiye ve dünyadaki en kapsamlı kuş gözlem veri tabanı olan eBird’ü kullanacağız. eBird, dünyadaki en büyük kuş veri tabanı. Kuş gözlemcileri araziye çıktıklarında gözlemledikleri kuşları bu veri tabanına kaydediyor, bilime ve doğa korumaya katkı sağlayabiliyorlar. 2015 yılında ulusal veri tabanımız Kuşbank’ın eBird’e taşınmasından beri Türkiye kuşlarını konu alan en kapsamlı veri tabanı aynı zamanda.\neBird verilerini siteye üye olup, en altta, Bilim başlığı altındaki Veri indirme talebi sayfasından ya da {rebird} paketini kullanarak indirebilirsiniz. Ben, site üzerinden tüm Türkiye verilerini talep ederek indirdim.\n\n\n2. Kuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nİndirdiğimiz eBird verilerini R’a yükleyelim. eBird verileri txt dosyası olduğundan {tidyverse} paket evreni içindeki bir fonksiyon olan read_delim()’i kullandık. Base R’daki read.table() fonksiyonu da kullanılabilir. Veri biraz büyük olduğundan yüklenmesi ve işlenmesi yavaş olabilir.\n\nebird <- read_delim(\"./ebird/ebd_TR_relApr-2023.txt\")\n\n\nprint(ebird)\n\n# A tibble: 2,403,720 × 50\n   `GLOBAL UNIQUE IDENTIFIER`     `LAST EDITED DATE`  `TAXONOMIC ORDER` CATEGORY\n   <chr>                          <dttm>                          <dbl> <chr>   \n 1 URN:CornellLabOfOrnithology:E… 2021-04-15 12:59:44             10043 species \n 2 URN:CornellLabOfOrnithology:E… 2021-04-15 12:58:56              5625 species \n 3 URN:CornellLabOfOrnithology:E… 2021-04-15 13:04:32              1361 species \n 4 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:13             22215 species \n 5 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32              5787 species \n 6 URN:CornellLabOfOrnithology:E… 2021-04-21 02:26:13             29239 species \n 7 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:35             22156 species \n 8 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32               291 species \n 9 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n10 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n# ℹ 2,403,710 more rows\n# ℹ 46 more variables: `TAXON CONCEPT ID` <chr>, `COMMON NAME` <chr>,\n#   `SCIENTIFIC NAME` <chr>, `SUBSPECIES COMMON NAME` <chr>,\n#   `SUBSPECIES SCIENTIFIC NAME` <chr>, `EXOTIC CODE` <chr>,\n#   `OBSERVATION COUNT` <chr>, `BREEDING CODE` <chr>,\n#   `BREEDING CATEGORY` <chr>, `BEHAVIOR CODE` <chr>, `AGE/SEX` <chr>,\n#   COUNTRY <chr>, `COUNTRY CODE` <chr>, STATE <chr>, `STATE CODE` <chr>, …\n\n\nprint() fonksiyonu ile verinin genel yapısını gördük. 2,403,720 gözlem (satır) ve 50 değişkene (sütun) sahip bir tibble ({tidyverse}’e özel bir data frame şekli, bence daha kullanışlı). Değişken sayısı fazla olduğu için print() fonksiyonu yeterince kullanışlı. Bu sebeple, R’a yüklediğimiz eBird veri tablosunun tüm sütunlarını ve onların yapılarını görmek için glimpse() fonksiyonunu kullanacağız. Bu fonksiyon, base R’daki str() fonksiyonuna benziyor ancak tibble veri yapısıyla kullanılırken daha sade ve kullanışlı bence. Özetle, bu fonksiyonu, print() fonksiyonunun transpoze edilmiş hâli olarak görebilirsiniz.\n\nglimpse(ebird)\n\nRows: 2,403,720\nColumns: 50\n$ `GLOBAL UNIQUE IDENTIFIER`   <chr> \"URN:CornellLabOfOrnithology:EBIRD:OBS112…\n$ `LAST EDITED DATE`           <dttm> 2021-04-15 12:59:44, 2021-04-15 12:58:56…\n$ `TAXONOMIC ORDER`            <dbl> 10043, 5625, 1361, 22215, 5787, 29239, 22…\n$ CATEGORY                     <chr> \"species\", \"species\", \"species\", \"species…\n$ `TAXON CONCEPT ID`           <chr> \"avibase-4F404CB9\", \"avibase-77845DAD\", \"…\n$ `COMMON NAME`                <chr> \"Indian Roller\", \"Siberian Crane\", \"Black…\n$ `SCIENTIFIC NAME`            <chr> \"Coracias benghalensis\", \"Leucogeranus le…\n$ `SUBSPECIES COMMON NAME`     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SUBSPECIES SCIENTIFIC NAME` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EXOTIC CODE`                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `OBSERVATION COUNT`          <chr> \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"…\n$ `BREEDING CODE`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BREEDING CATEGORY`          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BEHAVIOR CODE`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `AGE/SEX`                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ COUNTRY                      <chr> \"Türkiye\", \"Türkiye\", \"Türkiye\", \"Türkiye…\n$ `COUNTRY CODE`               <chr> \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\",…\n$ STATE                        <chr> \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbu…\n$ `STATE CODE`                 <chr> \"TR-41\", \"TR-06\", \"TR-34\", \"TR-34\", \"TR-3…\n$ COUNTY                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `COUNTY CODE`                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `IBA CODE`                   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BCR CODE`                   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `USFWS CODE`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `ATLAS BLOCK`                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ LOCALITY                     <chr> \"Haydarpasa-Izmit Yolu\", \"Ankara\", \"Istan…\n$ `LOCALITY ID`                <chr> \"L14466142\", \"L14465903\", \"L14465858\", \"L…\n$ `LOCALITY TYPE`              <chr> \"P\", \"P\", \"P\", \"H\", \"H\", \"H\", \"P\", \"H\", \"…\n$ LATITUDE                     <dbl> 40.78331, 39.92951, 41.00805, 40.99209, 3…\n$ LONGITUDE                    <dbl> 29.47437, 32.85443, 28.97673, 28.83948, 3…\n$ `OBSERVATION DATE`           <date> 1875-06-01, 1879-04-01, 1890-12-01, 1896…\n$ `TIME OBSERVATIONS STARTED`  <time>       NA,       NA,       NA,       NA, …\n$ `OBSERVER ID`                <chr> \"obsr1979154\", \"obsr1979154\", \"obsr197915…\n$ `SAMPLING EVENT IDENTIFIER`  <chr> \"S85596027\", \"S85594679\", \"S85597213\", \"S…\n$ `PROTOCOL TYPE`              <chr> \"Historical\", \"Historical\", \"Historical\",…\n$ `PROTOCOL CODE`              <chr> \"P62\", \"P62\", \"P62\", \"P62\", \"P62\", \"P62\",…\n$ `PROJECT CODE`               <chr> \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIR…\n$ `DURATION MINUTES`           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT DISTANCE KM`         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT AREA HA`             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `NUMBER OBSERVERS`           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 1, 1, 1, …\n$ `ALL SPECIES REPORTED`       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `GROUP IDENTIFIER`           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `HAS MEDIA`                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ APPROVED                     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REVIEWED                     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REASON                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `TRIP COMMENTS`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SPECIES COMMENTS`           <chr> \"Collected (Sclator & Taylor, 1876)., Kir…\n$ ...50                        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nBurada sütunları çok daha rahat bir şekilde görebiliyoruz. Şu an için işimize yaramayacak olan bir sürü sütun var. Bu sebeple işimize yarayacak olanları seçelim. Ardından da sadece tür kategorisindeki gözlemleri seçmek için species’e göre filtreleyelim.\n\nebird_subset <- ebird |>\n  select(4, 6, 7, 11, 12, 18, 29, 30) |>  # burada indeks kullanarak sectik, sutun isimleriyle de secebiliriz\n  filter(CATEGORY == \"species\")\nebird_subset\n\n# A tibble: 2,298,920 × 8\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n   <chr>    <chr>          <chr>             <chr>               <chr>          \n 1 species  Indian Roller  Coracias benghal… 1                   <NA>           \n 2 species  Siberian Crane Leucogeranus leu… X                   <NA>           \n 3 species  Black Grouse   Lyrurus tetrix    X                   <NA>           \n 4 species  White-winged … Alauda leucoptera 1                   <NA>           \n 5 species  White-tailed … Vanellus leucurus 2                   <NA>           \n 6 species  Mourning Whea… Oenanthe lugens   1                   <NA>           \n 7 species  Black Lark     Melanocorypha ye… 1                   <NA>           \n 8 species  Brant          Branta bernicla   1                   <NA>           \n 9 species  Slender-bille… Numenius tenuiro… 2                   <NA>           \n10 species  Slender-bille… Numenius tenuiro… 1                   <NA>           \n# ℹ 2,298,910 more rows\n# ℹ 3 more variables: STATE <chr>, LATITUDE <dbl>, LONGITUDE <dbl>\n\n\n\nglimpse(ebird_subset)\n\nRows: 2,298,920\nColumns: 8\n$ CATEGORY            <chr> \"species\", \"species\", \"species\", \"species\", \"speci…\n$ `COMMON NAME`       <chr> \"Indian Roller\", \"Siberian Crane\", \"Black Grouse\",…\n$ `SCIENTIFIC NAME`   <chr> \"Coracias benghalensis\", \"Leucogeranus leucogeranu…\n$ `OBSERVATION COUNT` <chr> \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\", …\n$ `BREEDING CODE`     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ STATE               <chr> \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbul\", \"Hata…\n$ LATITUDE            <dbl> 40.78331, 39.92951, 41.00805, 40.99209, 36.35517, …\n$ LONGITUDE           <dbl> 29.47437, 32.85443, 28.97673, 28.83948, 36.31517, …\n\n\nGördüğünüz gibi verinin işimize yarayacak bir alt kümesini aldık.\nArtık ilk yüklediğimiz veriyi (ebird) R’dan silebiliriz. Veri, tüm TR’yi kapsadığı için 2 milyondan fazla gözlem içeriyor. Büyük veri setleri RAM’in şişmesine ve R’ın çökmesine sebep olabilir. Bu sebeple artık işimize yaramayacak olan verileri environment’ten kaldırıyoruz.\n\nrm(ebird)\n\n\n\n3. Kuş verisinin mekânsallıştırılması\nEbird verimizi yükleyip, işimize yarayacak olan alt kümesini aldıktan sonra sıra geldi verimizi mekânsallaştırmaya. Verimizi, uygun mekânsal veri tipine dönüştürüp, mekânsal analizlerde kullanılabilecek bir hâle getireceğiz. Bunun için, R’da vektör verileri işlemek için geliştirilen {sf} paketini kullanacağız.\nLat long verisini ve koordinat sistemini tanımlayarak Ebird verisini sf objesine çevirdik.\n\nebird_sf <- st_as_sf(\n    ebird_subset, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = \"EPSG:4326\"\n)\nebird_sf\n\nSimple feature collection with 2298920 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 2,298,920 × 7\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n * <chr>    <chr>          <chr>             <chr>               <chr>          \n 1 species  Indian Roller  Coracias benghal… 1                   <NA>           \n 2 species  Siberian Crane Leucogeranus leu… X                   <NA>           \n 3 species  Black Grouse   Lyrurus tetrix    X                   <NA>           \n 4 species  White-winged … Alauda leucoptera 1                   <NA>           \n 5 species  White-tailed … Vanellus leucurus 2                   <NA>           \n 6 species  Mourning Whea… Oenanthe lugens   1                   <NA>           \n 7 species  Black Lark     Melanocorypha ye… 1                   <NA>           \n 8 species  Brant          Branta bernicla   1                   <NA>           \n 9 species  Slender-bille… Numenius tenuiro… 2                   <NA>           \n10 species  Slender-bille… Numenius tenuiro… 1                   <NA>           \n# ℹ 2,298,910 more rows\n# ℹ 2 more variables: STATE <chr>, geometry <POINT [°]>\n\n\nGördüğünüz gibi veri tablosuyla beraber artık geometri tipi (POINT), veri boyutu (dimension), verinin coğrafi sınırlarını belirten bounding box koordinatları ve bir CRS’e (koordinat referans sistemi) sahibiz. Bundan sonra mekânsal analizleri rahatça yapabiliriz.\nDikkat ederseniz her bir satırda, bir koordinat çiftinden oluşan koordinat verisi var. Bu, her bir satırın ve bu satırdaki tüm bilgilerin, bir geometriyle ilişkili olduğunu gösteriyor. Bu geometri de, gemoetri tipinde belirtildiği ya da bir koordinat çiftinin varlığından anlayabileceğimiz gibi nokta. Yani 2,298,920 tane noktamız var ve her bir nokta bir gözlemle ilişkili.\n\n\n4. TR il katmanının yüklenmesi\neBird verisini mekânsallaştırdığımıza göre, TR il sınırlarını R’a yükleyebiliriz. Ben geoBoundaries veri tabanını kullanıyorum. Siz de buradan indirebilirsiniz idari sınırlara dair verileri. Aşağıda da gördüğünüz gibi {rgeoboundaries} paketiyle tr il sınırlarına doğrudan erişebiliyoruz.\n\ntr_il <- gb_adm1(country = \"Turkey\", type = \"SSCGS\") # type = \"SSCGS\" argumaniyla basitlestirilmiş versiyonunu indiriyoruz\n\n[1] \"WARNING: geoBoundaries now provides two only types of boundaries: simplified and unsimplified.All other types are deprecated. If you selected SSCGS or SSCU it will be changed to simlified, HPSCU will be changed to usimplifed \"\n\ntr_il\n\nSimple feature collection with 81 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25.66545 ymin: 35.80768 xmax: 44.81766 ymax: 42.1048\nGeodetic CRS:  WGS 84\nFirst 10 features:\n        shapeName shapeISO                 shapeID shapeGroup shapeType\n1           Adana    TR-01 80719077B95172477822815        TUR      ADM1\n2        Adıyaman    TR-02 80719077B90872828599679        TUR      ADM1\n3  Afyonkarahisar    TR-03 80719077B26209284550223        TUR      ADM1\n4            Ağrı    TR-04 80719077B39003465173278        TUR      ADM1\n5          Amasya    TR-05 80719077B32583172380009        TUR      ADM1\n6         Antalya    TR-07 80719077B97476213604692        TUR      ADM1\n7          Artvin    TR-08  80719077B1602304411378        TUR      ADM1\n8           Aydın    TR-09 80719077B63739470532168        TUR      ADM1\n9       Balıkesir    TR-10 80719077B55384476443375        TUR      ADM1\n10         Ankara    TR-06 80719077B47806653651907        TUR      ADM1\n                         geometry\n1  MULTIPOLYGON (((34.91146 36...\n2  MULTIPOLYGON (((37.861 37.4...\n3  MULTIPOLYGON (((30.48061 38...\n4  MULTIPOLYGON (((43.77542 39...\n5  MULTIPOLYGON (((36.3878 40....\n6  MULTIPOLYGON (((30.40305 36...\n7  MULTIPOLYGON (((41.87016 40...\n8  MULTIPOLYGON (((27.33197 37...\n9  MULTIPOLYGON (((26.7224 39....\n10 MULTIPOLYGON (((31.96673 38...\n\n\nBase R plot fonksiyonu ile tr_il objemizi çizelim.\n\nplot(tr_il)\n\n\n\n\nGördüğünüz gibi sf objesi için plot() fonksiyonu, tüm değişkenleri çiziyor. Sadece shapeName değişkenini seçip, eksenleri ve başlığı ekleyerek daha iyi bir Türkiye il sınırları haritası çizelim.\n\nplot(tr_il[, \"shapeName\"], graticule = TRUE, axes = TRUE, main = \"Türkiye Haritası\")\n\n\n\n\nHop! Çok daha iyi!\nŞimdi de {tmap} paketinin içindeki qtm() fonksiyonu ile çizelim.\n\nqtm(tr_il)\n\n\n\n\nDaha az yazarak gayet güzel bir sonuç elde ettik. Yukarıda da gördüğünüz gibi harita çizmek için farklı yöntemler mevcut. Ben genelde {ggplot2} ve {tmap} paketlerini tercih ediyorum. Tercih size kalmış.\nŞimdi, kuş verimizin, Türkiye’deki dağılımına bakalım. 2 milyondan fazla satırı olan bir verinin grafiğini çizmek muhtemelen R’ın çökmesine sebep olacaktır. Bu yüzden bu verinin de bir alt kümesini alacağız.\n\nebird_sample <- sample_n(ebird_sf, 500000)\n\nVerideki 500000 satırı rastgele seçtik. Bu satır sayısı bilgisayarınız için fazla gelebilir. 5-10b de seçebilirsiniz.\nVerimizi, bu sefer de R’ın vazgeçilmez paketi olan ggplot ile görselleştiriyoruz.\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = ebird_sample, aes(), size = .5)\n\n\n\n\n500000 kuş gözlem verisinin Türkiye’deki dağılımı bu şekildeymiş. Batı’da ve büyükşehirlerin yakınlarında daha çok gözlem var. Hazır bu şekilde görselleştirmişken merak ettiğim 2 türün de dağılımına bir bakalım. Tür ismine göre filtreleyip çiziyoruz.\n\nSakallı Akbaba\n\n\nsakalli <- ebird_sf |> \n  filter(`SCIENTIFIC NAME` == \"Gypaetus barbatus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = sakalli, aes(), size = .7)\n\n\n\n\nGördüğünüz gibi sakallı akbabanın Türkiye’deki dağılımı Köroğlu Dağları, Aladağlar, Kaçkar Dağları, Akdağ gibi dağlık alanlarda yoğunlaşıyor.\nBir de kızıl akbaba için bakalım.\n\nkizil <- ebird_sf |> \n  filter(`SCIENTIFIC NAME` == \"Gyps fulvus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = kizil, aes(), size = .7)\n\n\n\n\nKızıl akbaba dağılımının, üreme ve göç bölgelerinde yoğunlaşan bir örüntü sergilediğini görebiliyoruz.\nBu arada aynı haritayı {tmap} paketi ile aşağıdaki gibi çizebiliriz.\n\ntm_shape(tr_il) +\n  tm_polygons() +\n  tm_shape(kizil) +\n  tm_dots()\n\n\n\n\n\n\n5. Kuş verisinin gruplanıp özetlenmesi\nBiraz oyalanmanın ardından tekrardan sorumuza odaklanabiliriz. Öncelikle Türkiye’deki kuş türlerini ve her türden kaç adet kayıt olduğunu görmek için kuş verisini tür ismine göre grupluyor, ardından kayıt sayısına göre özetliyoruz. Bu işlem biraz uzun sürebilir.\n\nebird_grouped <- ebird_sf |>\n  group_by(`SCIENTIFIC NAME`) |>\n  summarise(n = n())\nprint(ebird_grouped)\n\nSimple feature collection with 503 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 503 × 3\n   `SCIENTIFIC NAME`             n                                      geometry\n   <chr>                     <int>                                <GEOMETRY [°]>\n 1 Acanthis flammea              1                     POINT (32.87976 39.96636)\n 2 Accipiter badius              3 MULTIPOINT ((41.23051 37.10523), (39.85856 4…\n 3 Accipiter brevipes         2157 MULTIPOINT ((26.218 40.00467), (26.20626 40.…\n 4 Accipiter gentilis         1617 MULTIPOINT ((26.16617 39.819), (26.20626 40.…\n 5 Accipiter nisus           17281 MULTIPOINT ((26.01417 39.80894), (25.89106 4…\n 6 Acridotheres tristis        792 MULTIPOINT ((28.56435 41.1764), (28.61338 40…\n 7 Acrocephalus agricola       355 MULTIPOINT ((42.41 38.7), (42.42388 38.70286…\n 8 Acrocephalus arundinaceus  6899 MULTIPOINT ((25.89106 40.15504), (26.16617 3…\n 9 Acrocephalus dumetorum       25 MULTIPOINT ((35.95475 36.06548), (39.72347 4…\n10 Acrocephalus griseldis        1                       POINT (43.578 40.11865)\n# ℹ 493 more rows\n\n\n\nglimpse(ebird_grouped)\n\nRows: 503\nColumns: 3\n$ `SCIENTIFIC NAME` <chr> \"Acanthis flammea\", \"Accipiter badius\", \"Accipiter b…\n$ n                 <int> 1, 3, 2157, 1617, 17281, 792, 355, 6899, 25, 1, 2164…\n$ geometry          <GEOMETRY [°]> POINT (32.87976 39.96636), MULTIPOINT ((41.…\n\n\neBird veri tabanında Türkiye’den kayıtlı 503 tür varmış. eBird’ün internet sitesinde 494 adet tür gösteriyor ancak veri talebiyle aldığımız veri de 9 fazla tür var. Sebebi nedir bilmiyorum doğrusu. Aklıma, kesin olmayan bazı kayıtların da olabileceği geliyor sadece. Bilenler açıklarsa süper olur.\n\n\n6. Her bir il sınırı içinde kalan tür sayısının hesaplanması\nŞimdi, Türkiye’deki her bir ilin poligonu içerisindeki noktaları sayacağız. Bu da bize her bir ildeki toplam tür sayısını verecek. Öncelikle st_intersects() fonksiyonu ile her bir il ile kesişen noktaları belirliyoruz. Ardından lengths() fonksiyonu ile her bir ilde kaç adet nokta olduğunu hesaplıyoruz ve bunu, tr_il verisine yeni bir sütun olarak ekliyoruz. Temelde çok basit bir işlem ama başta anlamak zor olabiliyor.\n\ntr_il$bird_count <- lengths(st_intersects(tr_il, ebird_grouped))\n\n\n\n7. Verinin görselleştirilmesi\nŞimdi, hızlıca bir plotlayalım. Bunun için plot() fonksiyonunu kullacağız. tr_il içindeki bird_count sütununu seçelim.\n\nplot(tr_il[, \"bird_count\"])\n\n\n\n\nHaritamız hazır. Şimdi daha iyi bir görselleştirme için ggplot() fonksiyonunu kullanalım.\nÖncelikle kırılımlarımız belirleyelim ki haritamız daha güzel görünsün. Bunun için jenks optimizasyonunu kullanacağız.\n\nbreaks <-\n  classInt::classIntervals(tr_il$bird_count,\n                           n = 7,\n                           style = \"jenks\")\n\n\nggplot() +\n  geom_sf(data = tr_il,\n          aes(fill = bird_count),\n          colour = \"grey12\",\n          linewidth = .1) +\n  scale_fill_viridis_c(breaks = breaks$brks) +\n  guides(fill = guide_colorsteps(\n    barwidth = 20,\n    barheight = .5,\n    title.position = \"right\"\n  )) +\n  labs(\n    title = \"İllere Göre Kuş Türü Sayısı\",\n    x = \"Boylam\",\n    y = \"Enlem\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.background = element_rect(\"white\", colour = \"white\"),\n    text = element_text(family = \"Ubuntu Mono\"),\n    legend.title = element_blank()\n  )\n\n\n\n\nGördüğünüz gibi çok daha iyi bir görselleştirme oldu.\nBurada dikkat etmemiz gereken en önemli şeylerden birisi, verilerin, gözlem sayısı ve il yüzölçümü farklılıklarından dolayı yanlı (bias) olduğu. Bu harita genel fikirler verebilir ancak net çıkarımlar için verinin standartlaştırılması önem arz etmektedir.\nİkinci yazıda görüşmek dileğiyle.\nBilimle ve huzurla kalınız."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Delisi",
    "section": "",
    "text": "R ile Topografik Veri İndirme 2 - DEM Verisi İndirme ve Görselleştirme\n\n\n\n\n\n\nR\n\n\ngis\n\n\nr-spatial\n\n\nbase R\n\n\n\nR ile Topografik Topografik Veri İndirme 2\n\n\n\n\n\nMar 10, 2025\n\n\nMehmet Göktuğ Öztürk\n\n\n\n\n\n\n\n\n\n\n\n\nR ile Topografik Veri İndirme - DEM Verisi İndirme ve Görselleştirme\n\n\n\n\n\n\nR\n\n\ngis\n\n\nr-spatial\n\n\nbase R\n\n\n\nR ile Topografik Topografik Veri İndirme\n\n\n\n\n\nMar 3, 2025\n\n\nMehmet Göktuğ Öztürk\n\n\n\n\n\n\n\n\n\n\n\n\nR ve Kuşlar - eBird Verilerinin R ile Analizi II\n\n\n\n\n\n\nR\n\n\ngis\n\n\nr-spatial\n\n\ncase_study\n\n\n\nR ile Kuş Verilerinin Analizi II\n\n\n\n\n\nDec 10, 2023\n\n\nMehmet Göktuğ Öztürk\n\n\n\n\n\n\n\n\n\n\n\n\nR ve Kuşlar - eBird Verilerinin R ile Analizi I\n\n\n\n\n\n\nR\n\n\ngis\n\n\nr-spatial\n\n\ncase_study\n\n\n\nR ile Kuş Verilerinin Analizi\n\n\n\n\n\nSep 27, 2023\n\n\nMehmet Göktuğ Öztürk\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/ebird_R/ebird_r.html",
    "href": "blog/ebird_R/ebird_r.html",
    "title": "R ve Kuşlar - Ebird Verilerinin R ile Analizi 1",
    "section": "",
    "text": "İlk blog yazısıyla alakalı aklımda benzer bir plan vardı ancak geçtiğimiz haftalarda (yazıyı yazmamın üstünden aylar geçti :) ), yüksek lisansımı yaptığım labdaki sunumumun ardından, bu yazıyı yazmaya karar verdim. Bu blog yazısında, özetle, R’da kuş verilerini nasıl işleyeceğimize değineceğim. Kuşlara doğrudan ilginiz olmasa dahi, temel bazı mekânsal analizleri öğrenmek için faydalı bir yazı olacak.\nBurada iki temel sorumuz var:\n\nTürkiye’de, illere göre toplam kuş türü sayısı nasıl bir dağılım gösteriyor?\nBilindiği gibi Kızılcahamam, Türkiye’deki en önemli kara akbaba - Aegypius monachus popülasyonlarından birisini barındırıyor. Bu türün, Kızılcahamam ilçe sınırları içerisinde nasıl bir dağılımı vardır? Türün dağılımıyla çevresel faktörler arasındaki ilişki kabaca nasıldır?\n\nBu yazıda yalnızca birinci soruya odaklanacağız. İkinci soru için ikinci yazıyı bekleyiniz lütfen. :)"
  },
  {
    "objectID": "blog/ebird_R/ebird_r.html#türkiyede-illere-göre-toplam-kuş-türü-sayısı-nasıl-bir-dağılım-gösteriyor",
    "href": "blog/ebird_R/ebird_r.html#türkiyede-illere-göre-toplam-kuş-türü-sayısı-nasıl-bir-dağılım-gösteriyor",
    "title": "R ve Kuşlar - Ebird Verilerinin R ile Analizi 1",
    "section": "1. Türkiye’de, illere göre toplam kuş türü sayısı nasıl bir dağılım gösteriyor?",
    "text": "1. Türkiye’de, illere göre toplam kuş türü sayısı nasıl bir dağılım gösteriyor?\nBu soruya cevap verebilmek için öncelikle iki temel veriye ihtiyacımız var. Bunlardan birisi kuş, diğeri ise Türkiye’deki iller. Eğer elimizdeki kuş verisinde her bir tür için kaydedildiği il bilgisi varsa, illere göre kuş türlerini gruplayıp, kuş türü sayısını bulacak şekilde özetleyebiliriz. Bu, aşina olanlar için, Excel’deki pivot table’a benziyor. Ancak bu yöntemle mekânsal bir veri elde edemeyiz. Bu işlemin ardından kuş verisinin, Türkiye illeri katmanına, il isimlerine göre bağlanması gerekir. Hâlihazırda kuşların kaydedildiği noktaların koordinatları olduğundan, mekânsal olarak işleyeceğiz. Zaten koordinata göre toplanan verilerin mekansâl olarak işlenmesi daha güvenli.\n\nYazının Akışı\nYazının genel akışı aşağıdaki gibidir:\n\nGerekli paketlerin yüklenmesi\nKuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nKuş verisinin mekânsallıştırılması\nTR il katmanının yüklenmesi\nKuş verisinin gruplanıp özetlenmesi\nHer bir il sınırı içinde kalan tür sayısının hesaplanması\nVerinin görselleştirilmesi\n\n\n\n1. Gerekli paketlerin yüklenmesi\n\n\n\n\n\n\n\n\n\nPaket\nAçıklama\n\n\n\n\ntidyverse\nÇoğunlukla veri manipülasyonu ve görselleştirme üzerine paketler içeren bir paket koleksiyonu\n\n\nsf\nSimple Features: Mekânsal vektör verileri işlemek için\n\n\nrgeoboundaries\nMülki idare sınırlarını indirmek için\n\n\ntmap\nGüzel haritalar çizmek için\n\n\n\n\n\nEğer bu paketler kurulu değilse aşağıdaki kod bloğu ile kurabilirsiniz. Bu kod bloğu, paketi R’a yüklemeye çalışacak, eğer yükleyemezse kuracaktır. Eğer kurulumda sıkıntı yaşarsanız paketlerin dökümantasyonuna bakabilirsiniz.\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"sf\")) install.packages(\"sf\")\nif (!require(\"rgeoboundaries\")) install.packages(\"rgeoboundaries\")\nif (!require(\"tmap\")) install.packages(\"tmap\")\n\nEğer paketler kuruluysa library() fonksiyonu ile yükleyebiliriz.\n\nlibrary(tidyverse) # bircok veri isini kolaylastirmak icin\nlibrary(sf) # r'da mekansal vektor verileri islemek icin\nlibrary(rgeoboundaries) # tr il sinirlarina erismek icin\nlibrary(tmap) # guzel haritalar cizmek icin \n\nKuş verisi olarak, Türkiye ve dünyadaki en kapsamlı kuş gözlem veri tabanı olan eBird’ü kullanacağız. eBird, dünyadaki en büyük kuş veri tabanı. Kuş gözlemcileri araziye çıktıklarında gözlemledikleri kuşları bu veri tabanına kaydediyor, bilime ve doğa korumaya katkı sağlayabiliyorlar. 2015 yılında ulusal veri tabanımız Kuşbank’ın eBird’e taşınmasından beri Türkiye kuşlarını konu alan en kapsamlı veri tabanı aynı zamanda.\neBird verilerini siteye üye olup, en altta, Bilim başlığı altındaki Veri indirme talebi sayfasından ya da {rebird} paketini kullanarak indirebilirsiniz. Ben, site üzerinden tüm Türkiye verilerini talep ederek indirdim.\n\n\n2. Kuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nİndirdiğimiz eBird verilerini R’a yükleyelim. eBird verileri txt dosyası olduğundan {tidyverse} paket evreni içindeki bir fonksiyon olan read_delim()’i kullandık. Base R’daki read.table() fonksiyonu da kullanılabilir. Veri biraz büyük olduğundan yüklenmesi ve işlenmesi yavaş olabilir.\n\nebird <- read_delim(\"./ebird/ebd_TR_relApr-2023.txt\")\n\n\nprint(ebird)\n\n# A tibble: 2,403,720 × 50\n   `GLOBAL UNIQUE IDENTIFIER`     `LAST EDITED DATE`  `TAXONOMIC ORDER` CATEGORY\n   <chr>                          <dttm>                          <dbl> <chr>   \n 1 URN:CornellLabOfOrnithology:E… 2021-04-15 12:59:44             10043 species \n 2 URN:CornellLabOfOrnithology:E… 2021-04-15 12:58:56              5625 species \n 3 URN:CornellLabOfOrnithology:E… 2021-04-15 13:04:32              1361 species \n 4 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:13             22215 species \n 5 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32              5787 species \n 6 URN:CornellLabOfOrnithology:E… 2021-04-21 02:26:13             29239 species \n 7 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:35             22156 species \n 8 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32               291 species \n 9 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n10 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n# ℹ 2,403,710 more rows\n# ℹ 46 more variables: `TAXON CONCEPT ID` <chr>, `COMMON NAME` <chr>,\n#   `SCIENTIFIC NAME` <chr>, `SUBSPECIES COMMON NAME` <chr>,\n#   `SUBSPECIES SCIENTIFIC NAME` <chr>, `EXOTIC CODE` <chr>,\n#   `OBSERVATION COUNT` <chr>, `BREEDING CODE` <chr>,\n#   `BREEDING CATEGORY` <chr>, `BEHAVIOR CODE` <chr>, `AGE/SEX` <chr>,\n#   COUNTRY <chr>, `COUNTRY CODE` <chr>, STATE <chr>, `STATE CODE` <chr>, …\n\n\nprint() fonksiyonu ile verinin genel yapısını gördük. 2,403,720 gözlem (satır) ve 50 değişkene (sütun) sahip bir tibble ({tidyverse}’e özel bir data frame şekli, bence daha kullanışlı). Değişken sayısı fazla olduğu için print() fonksiyonu yeterince kullanışlı. Bu sebeple, R’a yüklediğimiz eBird veri tablosunun tüm sütunlarını ve onların yapılarını görmek için glimpse() fonksiyonunu kullanacağız. Bu fonksiyon, base R’daki str() fonksiyonuna benziyor ancak tibble veri yapısıyla kullanılırken daha sade ve kullanışlı bence. Özetle, bu fonksiyonu, print() fonksiyonunun transpoze edilmiş hâli olarak görebilirsiniz.\n\nglimpse(ebird)\n\nRows: 2,403,720\nColumns: 50\n$ `GLOBAL UNIQUE IDENTIFIER`   <chr> \"URN:CornellLabOfOrnithology:EBIRD:OBS112…\n$ `LAST EDITED DATE`           <dttm> 2021-04-15 12:59:44, 2021-04-15 12:58:56…\n$ `TAXONOMIC ORDER`            <dbl> 10043, 5625, 1361, 22215, 5787, 29239, 22…\n$ CATEGORY                     <chr> \"species\", \"species\", \"species\", \"species…\n$ `TAXON CONCEPT ID`           <chr> \"avibase-4F404CB9\", \"avibase-77845DAD\", \"…\n$ `COMMON NAME`                <chr> \"Indian Roller\", \"Siberian Crane\", \"Black…\n$ `SCIENTIFIC NAME`            <chr> \"Coracias benghalensis\", \"Leucogeranus le…\n$ `SUBSPECIES COMMON NAME`     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SUBSPECIES SCIENTIFIC NAME` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EXOTIC CODE`                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `OBSERVATION COUNT`          <chr> \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"…\n$ `BREEDING CODE`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BREEDING CATEGORY`          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BEHAVIOR CODE`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `AGE/SEX`                    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ COUNTRY                      <chr> \"Türkiye\", \"Türkiye\", \"Türkiye\", \"Türkiye…\n$ `COUNTRY CODE`               <chr> \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\",…\n$ STATE                        <chr> \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbu…\n$ `STATE CODE`                 <chr> \"TR-41\", \"TR-06\", \"TR-34\", \"TR-34\", \"TR-3…\n$ COUNTY                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `COUNTY CODE`                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `IBA CODE`                   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BCR CODE`                   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `USFWS CODE`                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `ATLAS BLOCK`                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ LOCALITY                     <chr> \"Haydarpasa-Izmit Yolu\", \"Ankara\", \"Istan…\n$ `LOCALITY ID`                <chr> \"L14466142\", \"L14465903\", \"L14465858\", \"L…\n$ `LOCALITY TYPE`              <chr> \"P\", \"P\", \"P\", \"H\", \"H\", \"H\", \"P\", \"H\", \"…\n$ LATITUDE                     <dbl> 40.78331, 39.92951, 41.00805, 40.99209, 3…\n$ LONGITUDE                    <dbl> 29.47437, 32.85443, 28.97673, 28.83948, 3…\n$ `OBSERVATION DATE`           <date> 1875-06-01, 1879-04-01, 1890-12-01, 1896…\n$ `TIME OBSERVATIONS STARTED`  <time>       NA,       NA,       NA,       NA, …\n$ `OBSERVER ID`                <chr> \"obsr1979154\", \"obsr1979154\", \"obsr197915…\n$ `SAMPLING EVENT IDENTIFIER`  <chr> \"S85596027\", \"S85594679\", \"S85597213\", \"S…\n$ `PROTOCOL TYPE`              <chr> \"Historical\", \"Historical\", \"Historical\",…\n$ `PROTOCOL CODE`              <chr> \"P62\", \"P62\", \"P62\", \"P62\", \"P62\", \"P62\",…\n$ `PROJECT CODE`               <chr> \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIR…\n$ `DURATION MINUTES`           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT DISTANCE KM`         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT AREA HA`             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `NUMBER OBSERVERS`           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 1, 1, 1, …\n$ `ALL SPECIES REPORTED`       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `GROUP IDENTIFIER`           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `HAS MEDIA`                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ APPROVED                     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REVIEWED                     <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REASON                       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `TRIP COMMENTS`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SPECIES COMMENTS`           <chr> \"Collected (Sclator & Taylor, 1876)., Kir…\n$ ...50                        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nBurada sütunları çok daha rahat bir şekilde görebiliyoruz. Şu an için işimize yaramayacak olan bir sürü sütun var. Bu sebeple işimize yarayacak olanları seçelim. Ardından da sadece tür kategorisindeki gözlemleri seçmek için species’e göre filtreleyelim.\n\nebird_subset <- ebird |>\n  select(4, 6, 7, 11, 12, 18, 29, 30) |>  # burada indeks kullanarak sectik, sutun isimleriyle de secebiliriz\n  filter(CATEGORY == \"species\")\nebird_subset\n\n# A tibble: 2,298,920 × 8\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n   <chr>    <chr>          <chr>             <chr>               <chr>          \n 1 species  Indian Roller  Coracias benghal… 1                   <NA>           \n 2 species  Siberian Crane Leucogeranus leu… X                   <NA>           \n 3 species  Black Grouse   Lyrurus tetrix    X                   <NA>           \n 4 species  White-winged … Alauda leucoptera 1                   <NA>           \n 5 species  White-tailed … Vanellus leucurus 2                   <NA>           \n 6 species  Mourning Whea… Oenanthe lugens   1                   <NA>           \n 7 species  Black Lark     Melanocorypha ye… 1                   <NA>           \n 8 species  Brant          Branta bernicla   1                   <NA>           \n 9 species  Slender-bille… Numenius tenuiro… 2                   <NA>           \n10 species  Slender-bille… Numenius tenuiro… 1                   <NA>           \n# ℹ 2,298,910 more rows\n# ℹ 3 more variables: STATE <chr>, LATITUDE <dbl>, LONGITUDE <dbl>\n\n\n\nglimpse(ebird_subset)\n\nRows: 2,298,920\nColumns: 8\n$ CATEGORY            <chr> \"species\", \"species\", \"species\", \"species\", \"speci…\n$ `COMMON NAME`       <chr> \"Indian Roller\", \"Siberian Crane\", \"Black Grouse\",…\n$ `SCIENTIFIC NAME`   <chr> \"Coracias benghalensis\", \"Leucogeranus leucogeranu…\n$ `OBSERVATION COUNT` <chr> \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\", …\n$ `BREEDING CODE`     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ STATE               <chr> \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbul\", \"Hata…\n$ LATITUDE            <dbl> 40.78331, 39.92951, 41.00805, 40.99209, 36.35517, …\n$ LONGITUDE           <dbl> 29.47437, 32.85443, 28.97673, 28.83948, 36.31517, …\n\n\nGördüğünüz gibi verinin işimize yarayacak bir alt kümesini aldık.\nArtık ilk yüklediğimiz veriyi (ebird) R’dan silebiliriz. Veri, tüm TR’yi kapsadığı için 2 milyondan fazla gözlem içeriyor. Büyük veri setleri RAM’in şişmesine ve R’ın çökmesine sebep olabilir. Bu sebeple artık işimize yaramayacak olan verileri environment’ten kaldırıyoruz.\n\nrm(ebird)\n\n\n\n3. Kuş verisinin mekânsallıştırılması\nEbird verimizi yükleyip, işimize yarayacak olan alt kümesini aldıktan sonra sıra geldi verimizi mekânsallaştırmaya. Verimizi, uygun mekânsal veri tipine dönüştürüp, mekânsal analizlerde kullanılabilecek bir hâle getireceğiz. Bunun için, R’da vektör verileri işlemek için geliştirilen {sf} paketini kullanacağız.\nLat long verisini ve koordinat sistemini tanımlayarak Ebird verisini sf objesine çevirdik.\n\nebird_sf <- st_as_sf(\n    ebird_subset, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = \"EPSG:4326\"\n)\nebird_sf\n\nSimple feature collection with 2298920 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 2,298,920 × 7\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n * <chr>    <chr>          <chr>             <chr>               <chr>          \n 1 species  Indian Roller  Coracias benghal… 1                   <NA>           \n 2 species  Siberian Crane Leucogeranus leu… X                   <NA>           \n 3 species  Black Grouse   Lyrurus tetrix    X                   <NA>           \n 4 species  White-winged … Alauda leucoptera 1                   <NA>           \n 5 species  White-tailed … Vanellus leucurus 2                   <NA>           \n 6 species  Mourning Whea… Oenanthe lugens   1                   <NA>           \n 7 species  Black Lark     Melanocorypha ye… 1                   <NA>           \n 8 species  Brant          Branta bernicla   1                   <NA>           \n 9 species  Slender-bille… Numenius tenuiro… 2                   <NA>           \n10 species  Slender-bille… Numenius tenuiro… 1                   <NA>           \n# ℹ 2,298,910 more rows\n# ℹ 2 more variables: STATE <chr>, geometry <POINT [°]>\n\n\nGördüğünüz gibi veri tablosuyla beraber artık geometri tipi (POINT), veri boyutu (dimension), verinin coğrafi sınırlarını belirten bounding box koordinatları ve bir CRS’e (koordinat referans sistemi) sahibiz. Bundan sonra mekânsal analizleri rahatça yapabiliriz.\nDikkat ederseniz her bir satırda, bir koordinat çiftinden oluşan koordinat verisi var. Bu, her bir satırın ve bu satırdaki tüm bilgilerin, bir geometriyle ilişkili olduğunu gösteriyor. Bu geometri de, gemoetri tipinde belirtildiği ya da bir koordinat çiftinin varlığından anlayabileceğimiz gibi nokta. Yani 2,298,920 tane noktamız var ve her bir nokta bir gözlemle ilişkili.\n\n\n4. TR il katmanının yüklenmesi\neBird verisini mekânsallaştırdığımıza göre, TR il sınırlarını R’a yükleyebiliriz. Ben geoBoundaries veri tabanını kullanıyorum. Siz de buradan indirebilirsiniz idari sınırlara dair verileri. Aşağıda da gördüğünüz gibi {rgeoboundaries} paketiyle tr il sınırlarına doğrudan erişebiliyoruz.\n\ntr_il <- gb_adm1(country = \"Turkey\", type = \"SSCGS\") # type = \"SSCGS\" argumaniyla basitlestirilmiş versiyonunu indiriyoruz\n\n[1] \"WARNING: geoBoundaries now provides two only types of boundaries: simplified and unsimplified.All other types are deprecated. If you selected SSCGS or SSCU it will be changed to simlified, HPSCU will be changed to usimplifed \"\n\ntr_il\n\nSimple feature collection with 81 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25.66545 ymin: 35.80768 xmax: 44.81766 ymax: 42.1048\nGeodetic CRS:  WGS 84\nFirst 10 features:\n        shapeName shapeISO                 shapeID shapeGroup shapeType\n1           Adana    TR-01 80719077B95172477822815        TUR      ADM1\n2        Adıyaman    TR-02 80719077B90872828599679        TUR      ADM1\n3  Afyonkarahisar    TR-03 80719077B26209284550223        TUR      ADM1\n4            Ağrı    TR-04 80719077B39003465173278        TUR      ADM1\n5          Amasya    TR-05 80719077B32583172380009        TUR      ADM1\n6         Antalya    TR-07 80719077B97476213604692        TUR      ADM1\n7          Artvin    TR-08  80719077B1602304411378        TUR      ADM1\n8           Aydın    TR-09 80719077B63739470532168        TUR      ADM1\n9       Balıkesir    TR-10 80719077B55384476443375        TUR      ADM1\n10         Ankara    TR-06 80719077B47806653651907        TUR      ADM1\n                         geometry\n1  MULTIPOLYGON (((34.91146 36...\n2  MULTIPOLYGON (((37.861 37.4...\n3  MULTIPOLYGON (((30.48061 38...\n4  MULTIPOLYGON (((43.77542 39...\n5  MULTIPOLYGON (((36.3878 40....\n6  MULTIPOLYGON (((30.40305 36...\n7  MULTIPOLYGON (((41.87016 40...\n8  MULTIPOLYGON (((27.33197 37...\n9  MULTIPOLYGON (((26.7224 39....\n10 MULTIPOLYGON (((31.96673 38...\n\n\nBase R plot fonksiyonu ile tr_il objemizi çizelim.\n\nplot(tr_il)\n\n\n\n\nGördüğünüz gibi sf objesi için plot() fonksiyonu, tüm değişkenleri çiziyor. Sadece shapeName değişkenini seçip, eksenleri ve başlığı ekleyerek daha iyi bir Türkiye il sınırları haritası çizelim.\n\nplot(tr_il[, \"shapeName\"], graticule = TRUE, axes = TRUE, main = \"Türkiye Haritası\")\n\n\n\n\nHop! Çok daha iyi!\nŞimdi de {tmap} paketinin içindeki qtm() fonksiyonu ile çizelim.\n\nqtm(tr_il)\n\n\n\n\nDaha az yazarak gayet güzel bir sonuç elde ettik. Yukarıda da gördüğünüz gibi harita çizmek için farklı yöntemler mevcut. Ben genelde {ggplot2} ve {tmap} paketlerini tercih ediyorum. Tercih size kalmış.\nŞimdi, kuş verimizin, Türkiye’deki dağılımına bakalım. 2 milyondan fazla satırı olan bir verinin grafiğini çizmek muhtemelen R’ın çökmesine sebep olacaktır. Bu yüzden bu verinin de bir alt kümesini alacağız.\n\nebird_sample <- sample_n(ebird_sf, 500000)\n\nVerideki 500000 satırı rastgele seçtik. Bu satır sayısı bilgisayarınız için fazla gelebilir. 5-10b de seçebilirsiniz.\nVerimizi, bu sefer de R’ın vazgeçilmez paketi olan ggplot ile görselleştiriyoruz.\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = ebird_sample, aes(), size = .5)\n\n\n\n\n500000 kuş gözlem verisinin Türkiye’deki dağılımı bu şekildeymiş. Batı’da ve büyükşehirlerin yakınlarında daha çok gözlem var. Hazır bu şekilde görselleştirmişken merak ettiğim 2 türün de dağılımına bir bakalım. Tür ismine göre filtreleyip çiziyoruz.\n\nSakallı Akbaba\n\n\nsakalli <- ebird_sf |> \n  filter(`SCIENTIFIC NAME` == \"Gypaetus barbatus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = sakalli, aes(), size = .7)\n\n\n\n\nGördüğünüz gibi sakallı akbabanın Türkiye’deki dağılımı Köroğlu Dağları, Aladağlar, Kaçkar Dağları, Akdağ gibi dağlık alanlarda yoğunlaşıyor.\nBir de kızıl akbaba için bakalım.\n\nkizil <- ebird_sf |> \n  filter(`SCIENTIFIC NAME` == \"Gyps fulvus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = kizil, aes(), size = .7)\n\n\n\n\nKızıl akbaba dağılımının, üreme ve göç bölgelerinde yoğunlaşan bir örüntü sergilediğini görebiliyoruz.\nBu arada aynı haritayı {tmap} paketi ile aşağıdaki gibi çizebiliriz.\n\ntm_shape(tr_il) +\n  tm_polygons() +\n  tm_shape(kizil) +\n  tm_dots()\n\n\n\n\n\n\n5. Kuş verisinin gruplanıp özetlenmesi\nBiraz oyalanmanın ardından tekrardan sorumuza odaklanabiliriz. Öncelikle Türkiye’deki kuş türlerini ve her türden kaç adet kayıt olduğunu görmek için kuş verisini tür ismine göre grupluyor, ardından kayıt sayısına göre özetliyoruz. Bu işlem biraz uzun sürebilir.\n\nebird_grouped <- ebird_sf |>\n  group_by(`SCIENTIFIC NAME`) |>\n  summarise(n = n())\nprint(ebird_grouped)\n\nSimple feature collection with 503 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 503 × 3\n   `SCIENTIFIC NAME`             n                                      geometry\n   <chr>                     <int>                                <GEOMETRY [°]>\n 1 Acanthis flammea              1                     POINT (32.87976 39.96636)\n 2 Accipiter badius              3 MULTIPOINT ((41.23051 37.10523), (39.85856 4…\n 3 Accipiter brevipes         2157 MULTIPOINT ((26.218 40.00467), (26.20626 40.…\n 4 Accipiter gentilis         1617 MULTIPOINT ((26.16617 39.819), (26.20626 40.…\n 5 Accipiter nisus           17281 MULTIPOINT ((26.01417 39.80894), (25.89106 4…\n 6 Acridotheres tristis        792 MULTIPOINT ((28.56435 41.1764), (28.61338 40…\n 7 Acrocephalus agricola       355 MULTIPOINT ((42.41 38.7), (42.42388 38.70286…\n 8 Acrocephalus arundinaceus  6899 MULTIPOINT ((25.89106 40.15504), (26.16617 3…\n 9 Acrocephalus dumetorum       25 MULTIPOINT ((35.95475 36.06548), (39.72347 4…\n10 Acrocephalus griseldis        1                       POINT (43.578 40.11865)\n# ℹ 493 more rows\n\n\n\nglimpse(ebird_grouped)\n\nRows: 503\nColumns: 3\n$ `SCIENTIFIC NAME` <chr> \"Acanthis flammea\", \"Accipiter badius\", \"Accipiter b…\n$ n                 <int> 1, 3, 2157, 1617, 17281, 792, 355, 6899, 25, 1, 2164…\n$ geometry          <GEOMETRY [°]> POINT (32.87976 39.96636), MULTIPOINT ((41.…\n\n\neBird veri tabanında Türkiye’den kayıtlı 503 tür varmış. eBird’ün internet sitesinde 494 adet tür gösteriyor ancak veri talebiyle aldığımız veri de 9 fazla tür var. Sebebi nedir bilmiyorum doğrusu. Aklıma, kesin olmayan bazı kayıtların da olabileceği geliyor sadece. Bilenler açıklarsa süper olur.\n\n\n6. Her bir il sınırı içinde kalan tür sayısının hesaplanması\nŞimdi, Türkiye’deki her bir ilin poligonu içerisindeki noktaları sayacağız. Bu da bize her bir ildeki toplam tür sayısını verecek. Öncelikle st_intersects() fonksiyonu ile her bir il ile kesişen noktaları belirliyoruz. Ardından lengths() fonksiyonu ile her bir ilde kaç adet nokta olduğunu hesaplıyoruz ve bunu, tr_il verisine yeni bir sütun olarak ekliyoruz. Temelde çok basit bir işlem ama başta anlamak zor olabiliyor.\n\ntr_il$bird_count <- lengths(st_intersects(tr_il, ebird_grouped))\n\n\n\n7. Verinin görselleştirilmesi\nŞimdi, hızlıca bir plotlayalım. Bunun için plot() fonksiyonunu kullacağız. tr_il içindeki bird_count sütununu seçelim.\n\nplot(tr_il[, \"bird_count\"])\n\n\n\n\nHaritamız hazır. Şimdi daha iyi bir görselleştirme için ggplot() fonksiyonunu kullanalım.\nÖncelikle kırılımlarımız belirleyelim ki haritamız daha güzel görünsün. Bunun için jenks optimizasyonunu kullanacağız.\n\nbreaks <-\n  classInt::classIntervals(tr_il$bird_count,\n                           n = 7,\n                           style = \"jenks\")\n\n\nggplot() +\n  geom_sf(data = tr_il,\n          aes(fill = bird_count),\n          colour = \"grey12\",\n          linewidth = .1) +\n  scale_fill_viridis_c(breaks = breaks$brks) +\n  guides(fill = guide_colorsteps(\n    barwidth = 20,\n    barheight = .5,\n    title.position = \"right\"\n  )) +\n  labs(\n    title = \"İllere Göre Kuş Türü Sayısı\",\n    x = \"Boylam\",\n    y = \"Enlem\"\n  ) +\n  theme_bw() +\n  theme(\n    legend.position = \"bottom\",\n    plot.background = element_rect(\"white\", colour = \"white\"),\n    text = element_text(family = \"Ubuntu Mono\"),\n    legend.title = element_blank()\n  )\n\n\n\n\nGördüğünüz gibi çok daha iyi bir görselleştirme oldu.\nBurada dikkat etmemiz gereken en önemli şeylerden birisi, verilerin, gözlem sayısı ve il yüzölçümü farklılıklarından dolayı yanlı (bias) olduğu. Bu harita genel fikirler verebilir ancak net çıkarımlar için verinin standartlaştırılması önem arz etmektedir.\nİkinci yazıda görüşmek dileğiyle.\nBilimle ve huzurla kalınız."
  },
  {
    "objectID": "posts/ebird_R_2/ebird_r_2.html",
    "href": "posts/ebird_R_2/ebird_r_2.html",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi II",
    "section": "",
    "text": "Merhabalar, blogun ikinci yazısına hoş geldiniz. Takıldığınız ve anlamadığınız yerler olursa lütfen yorum yapmaya çekinmeyiniz. Ayrıca katkılarınızı ve eleştirilerinizi de bekliyorum. Keyifli okumalar.\nBlogun ilk yazısını yazarken, ikincisi de birkaç haftaya çıkar, nasıl olsa kodlar hazır diye düşünüyordum ancak tezdir, iştir derken uzadı. Yoğunluk yetmiyormuş gibi bilgisayarın format ihtiyacı ve NTFS dosya sistemine sahip harici diskin linux ile uyumsuzluğu da eklenince yazının taslağı ve kodlarını kaybettim. Sonuç olarak -birbirinden güzel bahanelerimi özetleyecek olursam- gecikmiş, kaybedilmiş ve sıfırdan yazılmış bir yazıyla karşınızdayım.\nBu blog yazısı, bir öncekinin devamı niteliğinde sayılabilir. R ile eBird verilerini işlemeye devam edeceğiz. İlk yazıda birinci soru üzerine odaklanmıştık, bunda ise ikinci soruya odaklanacağız:\n\nBilindiği gibi Kızılcahamam, Türkiye’deki en önemli kara akbaba - Aegypius monachus popülasyonlarından birisini barındırıyor. Bu türün, Kızılcahamam ilçe sınırları içerisinde nasıl bir dağılımı vardır? Türün dağılımıyla çevresel faktörler arasındaki ilişki kabaca nasıldır?\n\nTemel R ve GIS bilgisine sahip olmanız yazıdaki birçok yeri anlamanız için yeterli olacaktır. Ancak bu alanlarda yeniyseniz de endişelenmeyin. Anlamadığınız her şeyi yorum olarak sorabilirsiniz. Blogun da ana amaçlarından birisi bu zaten. Ayrıca kuşlara ilginiz olmasa bile, bu yazının bazı temel mekânsal analizleri öğrenmek için faydalı olacağını düşünüyorum.\n\n\nYazınının Akışı\nYazının genel akışı aşağıdaki gibidir:\n\nPaketlerin yüklenmesi\nİlçe verisinin işleri\nKuş verisinin işleri\nDEM verisinin işleri\nTopografik hesaplamalar\nVerinin görselleştirilmesi\n\n\n\n1. Paketlerin yüklenmesi\n\n\n\n\n\n\n\n\n\nPaket\nAçıklama\n\n\n\n\ntidyverse\nÇoğunlukla veri manipülasyonu ve görselleştirme üzerine paketler içeren bir paket koleksiyonu\n\n\nsf\nSimple Features: Mekânsal vektör verileri işlemek için\n\n\nterra\nRaster verileri işlemek için\n\n\ntidyterra\nterra paketi için tidyverse metotları sağlayan bir paket\n\n\nmapview\nİnteraktif haritalar için\n\n\nrgeoboundaries\nMülki idare sınırlarını indirmek için\n\n\n\n\n\nBu paketler kurulu değilse aşağıdaki kod bloğu ile kurabilirsiniz. Bu kod bloğu, paketi R’a yüklemeye çalışacak, eğer yükleyemezse kuracaktır. Paketler kuruluysa, library() fonksiyonu ile yükleyebiliriz.\n\n# eger paketler yuklu degilse onlari kur\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"sf\")) install.packages(\"sf\")\nif (!require(\"terra\")) install.packages(\"terra\")\nif (!require(\"tidyterra\")) install.packages(\"tidyterra\")\nif (!require(\"mapview\")) install.packages(\"mapview\")\nif (!require(\"rgeoboundaries\")) remotes::install_github(\"wmgeolab/rgeoboundaries\")\n\n# paketleri R'a yukle\nlibrary(tidyverse) # bircok veri isini kolaylastirmak için\nlibrary(sf) # r'da mekansal vektor verileri islemek icin\nlibrary(terra) # r'da mekansal raster verileri islemek icin\nlibrary(tidyterra) # terra ile tidyverse metotlari kullanmak icin\nlibrary(mapview) # interaktif haritalar cizmek icin\nlibrary(rgeoboundaries) # tr ilce sinirlarina erismek icin\n\n\n\n2. İlçe verisinin işleri\nİkinci soruya cevap verebilmek için kuş, ilçe sınırları ve dijital yükseklik modeline (DEM) ihtiyacımız var. İlk ilçeden başlayalım. Kuş ve DEM verisini işlemek için ilçeye ihtiyaç duyacağız ne de olsa.\nİlk yazıda olduğu gibi bu sefer de geoBoundaries verisini kullanacağız. Şimdi ilçe verilerini indirip, içinden Kızılcahamam’ı çıkartalım.\n\ntr_ilce &lt;- gb_adm2(country = \"Turkey\", type = \"SSCGS\") # type = \"SSCGS\" argumaniyla basitlestirilmiş versiyonunu indiriyoruz\nkhamam &lt;- tr_ilce[tr_ilce$shapeName == \"Kızılcahamam\", ]\nkhamam\n\nSimple feature collection with 1 feature and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 32.27539 ymin: 40.21093 xmax: 32.91882 ymax: 40.75389\nGeodetic CRS:  WGS 84\n    shapeGroup shapeType    shapeName shapeISO                shapeID\n388        TUR      ADM2 Kızılcahamam     &lt;NA&gt; 54988432B2925959455693\n    shapeCanonical                       geometry\n388      Districts MULTIPOLYGON (((32.51627 40...\n\n\nKızılcahamam’ı doğru bir şekilde aldık gibi görünüyor. Verimizi {mapview} paketini kullanarak görselleştirelim, bir kontrol edelim. Bu paket, interaktif haritalar yapmak için oldukça işlevsel.\n\nmapview(khamam)\n\n\n\n\n\nGördüğünüz gibi her şey yolunda. :)\n\n\n3. Kuş verisinin işleri\n\n\n\nKara akbaba. Kaynak: Johann Andreas Naumann’s … Naturgeschichte der Vögel Deutschlands… | Leipzig, G. Fleischer, 1820-1860\n\n\nKara akbaba - Aegypius monachus, Avrasya’da geniş dağılıma sahip bir yırtıcı türü. 3 metreye varan kanat açıklığıyla en büyük kuşlardan birisi ve azalan bir popülasyona sahip. Türkiye, türün en önemli yaşam alanlarından birisi. Tür, özellikle Kuzey Anadolu’da, orman - bozkır geçişindeki yaşlı ormanları tercih ediyor. Bu alanlardan birisi de bu yazıda incelediğimiz yer olan Kızılcahamam. Kızılcahamam’ın yaşlı karaçam - Pinus nigra ormanları, türün üremesi için oldukça elverişli.\nTürle alakalı kısa bir bilgi verdikten sonra verilere tekrardan dönebiliriz. Kuş verisini nasıl elde ettiğimize ilk yazıda değinmiştik. Tekrardan uzun uzun anlatmaya gerek yok.\nÖncelikle kuş verimizi R’a yükleyelim:\n\nebird &lt;- read_delim(\"./ebird/ebd_TR_relApr-2023.txt\")\n\n\nprint(ebird)\n\n# A tibble: 2,403,720 × 50\n   `GLOBAL UNIQUE IDENTIFIER`     `LAST EDITED DATE`  `TAXONOMIC ORDER` CATEGORY\n   &lt;chr&gt;                          &lt;dttm&gt;                          &lt;dbl&gt; &lt;chr&gt;   \n 1 URN:CornellLabOfOrnithology:E… 2021-04-15 12:59:44             10043 species \n 2 URN:CornellLabOfOrnithology:E… 2021-04-15 12:58:56              5625 species \n 3 URN:CornellLabOfOrnithology:E… 2021-04-15 13:04:32              1361 species \n 4 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:13             22215 species \n 5 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32              5787 species \n 6 URN:CornellLabOfOrnithology:E… 2021-04-21 02:26:13             29239 species \n 7 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:35             22156 species \n 8 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32               291 species \n 9 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n10 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n# ℹ 2,403,710 more rows\n# ℹ 46 more variables: `TAXON CONCEPT ID` &lt;chr&gt;, `COMMON NAME` &lt;chr&gt;,\n#   `SCIENTIFIC NAME` &lt;chr&gt;, `SUBSPECIES COMMON NAME` &lt;chr&gt;,\n#   `SUBSPECIES SCIENTIFIC NAME` &lt;chr&gt;, `EXOTIC CODE` &lt;chr&gt;,\n#   `OBSERVATION COUNT` &lt;chr&gt;, `BREEDING CODE` &lt;chr&gt;,\n#   `BREEDING CATEGORY` &lt;chr&gt;, `BEHAVIOR CODE` &lt;chr&gt;, `AGE/SEX` &lt;chr&gt;,\n#   COUNTRY &lt;chr&gt;, `COUNTRY CODE` &lt;chr&gt;, STATE &lt;chr&gt;, `STATE CODE` &lt;chr&gt;, …\n\n\nGördüğünüz gibi 2,403,720 gözlem (satır) ve 50 değişkene (sütun) sahip bir veri tablomuz var. Bu verilerin çoğuna ihtiyaç duymuyoruz. Dolayısıyla işimize yaramayanlardan kurtulmamız işimizi çokça kolaylaştıracaktır. Sadece işimize yarayan sütunları seçip, kara akbaba türüne ait gözlemleri içerecek şekilde filtreleyelim.\n\nkaraakbaba &lt;- ebird |&gt;\n  select(6, 7, 11, 12, 29, 30) |&gt;  # burada indeks kullanarak sectik, sutun isimleriyle de secebiliriz\n  filter(`SCIENTIFIC NAME` == \"Aegypius monachus\")\nkaraakbaba\n\n# A tibble: 1,910 × 6\n   `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE` LATITUDE\n   &lt;chr&gt;          &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;              &lt;dbl&gt;\n 1 Cinereous Vul… Aegypius monachus 1                   &lt;NA&gt;                40.5\n 2 Cinereous Vul… Aegypius monachus 5                   &lt;NA&gt;                40.5\n 3 Cinereous Vul… Aegypius monachus 1                   &lt;NA&gt;                40.0\n 4 Cinereous Vul… Aegypius monachus 3                   &lt;NA&gt;                40.5\n 5 Cinereous Vul… Aegypius monachus 1                   &lt;NA&gt;                40.5\n 6 Cinereous Vul… Aegypius monachus 1                   &lt;NA&gt;                40.5\n 7 Cinereous Vul… Aegypius monachus 2                   &lt;NA&gt;                40.5\n 8 Cinereous Vul… Aegypius monachus 2                   &lt;NA&gt;                40.5\n 9 Cinereous Vul… Aegypius monachus 1                   &lt;NA&gt;                40.5\n10 Cinereous Vul… Aegypius monachus 2                   &lt;NA&gt;                40.5\n# ℹ 1,900 more rows\n# ℹ 1 more variable: LONGITUDE &lt;dbl&gt;\n\n\nŞimdi değişken sayımız 6’ya, gözlem sayımız ise 1910’a düştü. Veri, çok daha yönetilebilir bir hâlde. Bu etkiyi, değişken isimlerini değiştirerek daha da artırabiliriz. Daha kısa, tamamı küçük harflerden oluşan, latinize ve boşluklar yerine alt çizgi kullandığımız isimler daha kullanışlı olacaktır. Herhangi bir hatayla karşılaşma riskimiz düşecektir. Bunun için ilk olarak karaakbaba data frame’inin değişken (sütun) isimlerine bakalım. names() ya da colnames() fonksiyonunu kullanabiliriz.\n\nnames(karaakbaba)\n\n[1] \"COMMON NAME\"       \"SCIENTIFIC NAME\"   \"OBSERVATION COUNT\"\n[4] \"BREEDING CODE\"     \"LATITUDE\"          \"LONGITUDE\"        \n\n\nŞimdi de yeni isimlerden oluşan bir karakter vektörü oluşturalım ve bunu karaakbaba data frame’inin değişken isimlerine atayalım.\n\nnames(karaakbaba) &lt;- c(\n  \"eng_name\", \"sci_name\", \"obs_count\", \"breeding_code\", \"y\", \"x\"\n)\nnames(karaakbaba)\n\n[1] \"eng_name\"      \"sci_name\"      \"obs_count\"     \"breeding_code\"\n[5] \"y\"             \"x\"            \n\n\nGördüğünüz gibi değişken isimlerini istediğimiz gibi değiştirdik.\nArtık ilk yüklediğimiz eBird verisini R’dan silebiliriz. Bu veri, 2 milyondan fazla gözlemden oluştuğu için RAM’in şişmesine ve R’ın çökmesine yol açabilir. Ardından da çöp toplayıcıyı (garbage collector) çalıştırmak faydalı olacaktır. R, bu işi genelde otomatik yapıyor ancak büyük veriler silindiği zaman gc()’nin çalıştırılması öneriliyor.\n\nrm(ebird)\ngc()\n\n          used  (Mb) gc trigger  (Mb)  max used   (Mb)\nNcells 3669505 196.0   10528268 562.3   7274158  388.5\nVcells 8013745  61.2  125198234 955.2 145040810 1106.6\n\n\nŞimdi de mekânsallaştırmaya geçebiliriz. Verimiz şu anda bir data frame. Dolayısıyla onunla mekânsal işler yapmak için verimizi mekânsallaştırmamız gerekiyor. Bunun için {sf} paketini kullanacağız. Bu paket, mekânsal vektör veriler işlemek için geliştirmiş, OGC (Open Geospatial Consortium) standardı bir paket. Ben de işlerimin büyük bir kısmında onu tercih ediyorum.\nKoordinatların olduğu sütunları ve koordinat sistemini tanımlayarak verimizi sf objesine dönüştürelim.\n\nkaraakbaba_sf &lt;- st_as_sf(\n  karaakbaba, coords = c(\"x\", \"y\"), crs = \"EPSG:4326\"\n)\nkaraakbaba_sf\n\nSimple feature collection with 1910 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 26.50652 ymin: 36.02635 xmax: 44.5648 ymax: 42.0362\nGeodetic CRS:  WGS 84\n# A tibble: 1,910 × 5\n   eng_name          sci_name  obs_count breeding_code            geometry\n * &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;                 &lt;POINT [°]&gt;\n 1 Cinereous Vulture Aegypius… 1         &lt;NA&gt;          (32.62995 40.46758)\n 2 Cinereous Vulture Aegypius… 5         &lt;NA&gt;          (32.62995 40.46758)\n 3 Cinereous Vulture Aegypius… 1         &lt;NA&gt;          (34.61423 40.01914)\n 4 Cinereous Vulture Aegypius… 3         &lt;NA&gt;          (32.62995 40.46758)\n 5 Cinereous Vulture Aegypius… 1         &lt;NA&gt;           (32.6622 40.48013)\n 6 Cinereous Vulture Aegypius… 1         &lt;NA&gt;           (32.62403 40.4557)\n 7 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n 8 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n 9 Cinereous Vulture Aegypius… 1         &lt;NA&gt;           (32.62403 40.4557)\n10 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n# ℹ 1,900 more rows\n\n\nKara akbaba verisi artık mekânsal bir formatta. Geometri tipi, koordinat sistemi gibi öznitelikler barındırıyor.\nVeriyi daha iyi tanımak için ilk görselleştirmeleri yapalım. Acaba kara akbabalar Türkiye’de nasıl dağılıyor? Bunun için tekrardan mapview() fonksiyonunu kullanıyoruz.\n\nmapview(karaakbaba_sf)\n\n\n\n\n\nBu işlem de tamam. Gördüğünüz gibi ülkemizin kuzeyinde yoğunlaşan bir popülasyon mevcut.\nSıra geldi kuş verimizin Kızılcahamam’a göre alt kümesini almaya.\n\nkaraakbaba_subset &lt;- karaakbaba_sf[khamam, ]\nkaraakbaba_subset\n\nSimple feature collection with 139 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 32.29039 ymin: 40.24768 xmax: 32.8661 ymax: 40.64056\nGeodetic CRS:  WGS 84\n# A tibble: 139 × 5\n   eng_name          sci_name  obs_count breeding_code            geometry\n   &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;                 &lt;POINT [°]&gt;\n 1 Cinereous Vulture Aegypius… 1         &lt;NA&gt;          (32.62995 40.46758)\n 2 Cinereous Vulture Aegypius… 5         &lt;NA&gt;          (32.62995 40.46758)\n 3 Cinereous Vulture Aegypius… 3         &lt;NA&gt;          (32.62995 40.46758)\n 4 Cinereous Vulture Aegypius… 1         &lt;NA&gt;           (32.6622 40.48013)\n 5 Cinereous Vulture Aegypius… 1         &lt;NA&gt;           (32.62403 40.4557)\n 6 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n 7 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n 8 Cinereous Vulture Aegypius… 1         &lt;NA&gt;           (32.62403 40.4557)\n 9 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n10 Cinereous Vulture Aegypius… 2         &lt;NA&gt;           (32.62403 40.4557)\n# ℹ 129 more rows\n\n\nKızılcahamam’da, eBird veritabanında kayıtlı 139 tane kara akbaba kaydı varmış. Bunlara bir göz atıp DEM verisiyle ilgilenmeye başlayalım. Kara akbaba dağılımıyla alakalı asıl haritayı en son yapacağız.\n\nplot(\n  st_geometry(khamam), \n  main = \"Kızılcahamam'da Kara Akbaba Dağılımı\", \n  lwd = 2, \n  border = \"grey30\", \n  axes = TRUE, \n  reset = FALSE\n) \nplot(\n  st_geometry(karaakbaba_subset), \n  cex = 1, \n  pch = 3, \n  lwd = 1.5, \n  add = TRUE\n)\n\n\n\n\n\n\n\n\nHemen hızlıca mapview ile de bakalım.\n\nmapview(khamam, lwd = 3, alpha.regions = 0) + mapview(karaakbaba_subset)\n\n\n\n\n\n\n\n4. DEM verisinin işleri\nKara akbabanın Kızılcahamam’daki dağılımını ortaya çıkarttık. Şimdi de bazı çevresel değişkenlerle ilişkisi nasılmış, -kabaca- ona bakalım. Ben, topografik değişkenlerle olan ilişkisini merak ettim ve bu sebeple DEM verisine bakacağız.\nDEM (Digital Elevation Model), kısaca, yeryüzünün yükseklik bilgisini sayısal olarak temsil eden modele verilen isim. Her bir grid için, sahip olduğu yükseklik verisini barındırır. Topografik ve hidrolojik birçok analizde sıklıkla kullanılıyor. Rakımın biyolojik sistemlerdeki önemi nedeniyle, ekoloji ve biyocoğrafyada da yaygın bir kullanımı var.\nBurada COP-DEM (Copernicus DEM) kullandım. Veriye şu bağlantıdan ulaşabilirsiniz. Belki daha sonra bu verinin nereden, nasıl indirilebileceğiyle alakalı bir başka yazı yazarım.\n\n\n\nRaster veri tipi. Kaynak: Geocomputation with R\n\n\nDEM verisi, raster formatında bir veri. Raster veriyi, bir tür resim ya da bir tür matris olarak düşünebilirsiniz. Bu veri, hücrelerden - gridlerden oluşur ve her bir grid için bir değer içerir. Genellikle, yükseklik, eğim, sıcaklık, yağış gibi sürekli veriler bu formattadır.\nBiz bu veri için {terra} paketini kullanacağız. Oldukça hızlı ve işlevsel bir paket.\n\n# dem verisini yukleyelim\ndem &lt;- rast(\"./dem_4326.tif\")\ndem\n\nclass       : SpatRaster \ndimensions  : 7556, 22983, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nextent      : 25.66542, 44.81792, 35.80792, 42.10458  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : dem_4326.tif \nname        : Copernicus_DSM_COG_30_N35_00_E025_00_DEM \nmin value   :                                -86.01817 \nmax value   :                               5107.41357 \n\n\nVeriyi yazdırdığımızda, çözünürlüğünden, dört köşesinin koordinatına ve koordinat sistemine kadar birçok detayı görebiliyoruz.\n\nplot(dem)\n\n\n\n\n\n\n\n\nKolayca haritasını da çizebiliyoruz. Gördüğünüz gibi Türkiye topografik haritası.\nŞimdi verimizi Kızılcahamam ilçe sınırlarına göre maskeleyelim. khamam, sf formatında olduğu için vect() ile {terra}’nın kendi vektör veri tipi olan SpatVector’e dönüştürüyoruz.\n\ndem_subset &lt;- crop(dem, vect(khamam), mask = TRUE)\ndem_subset\n\nclass       : SpatRaster \ndimensions  : 651, 772, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nextent      : 32.27542, 32.91875, 40.21125, 40.75375  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource(s)   : memory\nvarname     : dem_4326 \nname        : Copernicus_DSM_COG_30_N35_00_E025_00_DEM \nmin value   :                                 749.5305 \nmax value   :                                2069.5696 \n\n\n\nplot(dem_subset)\n\n\n\n\n\n\n\n\n\n\n5. Topografik hesaplamalar\nterrain() ile eğim ve bakıyı hesaplayalım.\n\nslp &lt;- terrain(dem_subset, \"slope\")\nasp &lt;- terrain(dem_subset, \"aspect\")\n\n\npar(mfrow = c(1, 2))\nplot(slp, main = \"Kızılcahamam Eğim Haritası\")\nplot(asp, main = \"Kızılcahamam Bakı Haritası\")\n\n\n\n\n\n\n\n\nŞimdi de her bir kara akbaba gözlem noktasının sahip olduğu çevresel değişkenleri çıkartalım ve ardından karaakbaba verisiyle birleştirelim.\n\nkaraakbaba_subset$ID &lt;- 1:nrow(karaakbaba_subset)\n\next_dem &lt;- extract(dem, vect(karaakbaba_subset))\next_slp &lt;- extract(slp, vect(karaakbaba_subset))\next_asp &lt;- extract(asp, vect(karaakbaba_subset))\n\next_dem &lt;- left_join(karaakbaba_subset, ext_dem, by = \"ID\")\next_slp &lt;- left_join(ext_dem, ext_slp, by = \"ID\")\next_asp &lt;- left_join(ext_slp, ext_asp, by = \"ID\")\n\nkaraakbaba_ext &lt;- ext_asp\nnames(karaakbaba_ext)[7] &lt;- \"altitude\"\nglimpse(karaakbaba_ext)\n\nRows: 139\nColumns: 9\n$ eng_name      &lt;chr&gt; \"Cinereous Vulture\", \"Cinereous Vulture\", \"Cinereous Vul…\n$ sci_name      &lt;chr&gt; \"Aegypius monachus\", \"Aegypius monachus\", \"Aegypius mona…\n$ obs_count     &lt;chr&gt; \"1\", \"5\", \"3\", \"1\", \"1\", \"2\", \"2\", \"1\", \"2\", \"2\", \"2\", \"…\n$ breeding_code &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ geometry      &lt;POINT [°]&gt; POINT (32.62995 40.46758), POINT (32.62995 40.4675…\n$ ID            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ altitude      &lt;dbl&gt; 1058.8070, 1058.8070, 1058.8070, 1045.1802, 1136.2458, 1…\n$ slope         &lt;dbl&gt; 11.188035, 11.188035, 11.188035, 22.408733, 11.157285, 1…\n$ aspect        &lt;dbl&gt; 309.599090, 309.599090, 309.599090, 242.915925, 7.856463…\n\n\nGördüğünüz gibi kara akbaba verimizin içinde artık her bir nokta için rakım, eğim ve bakı bilgisi mevcut. Bu aşamadan sonra modellerle çalışabiliriz ancak bu, bu yazının konusu değil. Ayrıca elimizdeki veri bunun için ne kadar yeterli, ayrı bir tartışma konusu. Şimdi çıkarttığımız topografik verilere bir göz atıp asıl haritamızı yapmaya geçebiliriz.\n\nkaraakbaba_ext |&gt;\n  st_drop_geometry() |&gt;\n  pivot_longer(cols = c(\"altitude\", \"slope\", \"aspect\")) |&gt; \n  ggplot(aes(x = value, fill = name, colour = \"name\")) +\n  geom_histogram(alpha = .6) +\n  scale_fill_viridis_d() +\n  scale_color_viridis_d() +\n  theme_minimal() +    \n  theme(\n    legend.position=\"none\",\n  ) + \n  facet_wrap(~name, scales = \"free_x\")\n\n\n\n\n\n\n\n\n\n\n6. Verinin görselleştirilmesi\nUzun bir yazı oldu yine ancak sonuna geldik. Şimdi Kızılcahamam’daki kara akbaba gözlemlerinin dağılımını, DEM ile birlikte görselleştirmeye çalışalım.\n\nggplot() +              # grafigi baslatiyor\n  geom_spatraster(      # dem verisini ekliyoruz\n    data = dem_subset,\n    na.rm = TRUE\n  ) +\n  geom_sf(              # kizilcahamam ilce sinirlarini ekliyoruz\n    data = khamam,\n    fill = NA\n  ) +\n  geom_sf(              # kara akbaba gozlem verisini ekliyoruz\n    data = karaakbaba_subset,\n    aes()\n  ) +\n  scale_fill_wiki_c() + # dem verisi icin renk paleti ekliyoruz\n  labs(                 # etiketleri yaziyoruz\n    title = \"Kara Akbaba Dağılım Haritası\",\n    subtitle = \"Kızılcahamam'daki kara akbaba gözlemlerinin dağılımı\",\n    fill = \"Yükseklik (m)\",\n    caption = \"Veri: eBird | COP-DEM\"\n  ) +\n  theme_minimal() +     # tema seciyoruz\n  theme(                # temanin ozelliklerini belirliyoruz\n    plot.background = element_rect(\"white\", colour = \"white\"),\n    text = element_text(family = \"ubuntu mono\")\n  )\n\n\n\n\n\n\n\n\nGüzel oldu sanki. :)\nBilimle ve huzurla kalınız."
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#yazının-akışı",
    "href": "posts/ebird_R/ebird_r.html#yazının-akışı",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "Yazının Akışı",
    "text": "Yazının Akışı\nYazının genel akışı aşağıdaki gibidir:\n\nGerekli paketlerin yüklenmesi\nKuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nKuş verisinin mekânsallıştırılması\nTR il katmanının yüklenmesi\nKuş verisinin gruplanıp özetlenmesi\nHer bir il sınırı içinde kalan tür sayısının hesaplanması\nVerinin görselleştirilmesi"
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#gerekli-paketlerin-yüklenmesi",
    "href": "posts/ebird_R/ebird_r.html#gerekli-paketlerin-yüklenmesi",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "1. Gerekli paketlerin yüklenmesi",
    "text": "1. Gerekli paketlerin yüklenmesi\n\n\n\n\n\n\n\n\n\nPaket\nAçıklama\n\n\n\n\ntidyverse\nÇoğunlukla veri manipülasyonu ve görselleştirme üzerine paketler içeren bir paket koleksiyonu\n\n\nsf\nSimple Features: Mekânsal vektör verileri işlemek için\n\n\nrgeoboundaries\nMülki idare sınırlarını indirmek için\n\n\n\n\n\nEğer bu paketler kurulu değilse aşağıdaki kod bloğu ile kurabilirsiniz. Bu kod bloğu, paketi R’a yüklemeye çalışacak, eğer yükleyemezse kuracaktır. Eğer kurulumda sıkıntı yaşarsanız paketlerin dökümantasyonuna bakabilirsiniz.\n\nif (!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif (!require(\"sf\")) install.packages(\"sf\")\nif (!require(\"rgeoboundaries\")) install.packages(\"rgeoboundaries\")\n\nEğer paketler kuruluysa, bu paketleri library() fonksiyonu ile yükleyebiliriz.\n\nlibrary(tidyverse) # bircok veri isini kolaylastirmak icin\nlibrary(sf) # r'da mekansal vektor verileri islemek icin\nlibrary(rgeoboundaries) # tr il sinirlarina erismek icin"
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#kuş-verisinin-yüklenip-bu-yazı-için-gerekli-olan-alt-kümesinin-alınması",
    "href": "posts/ebird_R/ebird_r.html#kuş-verisinin-yüklenip-bu-yazı-için-gerekli-olan-alt-kümesinin-alınması",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "2. Kuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması",
    "text": "2. Kuş verisinin yüklenip bu yazı için gerekli olan alt kümesinin alınması\nYazımızdaki ilk soruya cevap verebilmek için iki temel veriye ihtiyacımız var. Bunlar kuş ve Türkiye’nin il sınırları verileri.\nKuş verisini eBird veri tabanından alacağız. eBird, Türkiye ve dünyadaki en kapsamlı kuş gözlem veri tabanı. Kuş gözlemcileri araziye çıktıklarında gözlemledikleri kuşları bu veri tabanına kaydediyor, bu şekilde bilime ve doğa korumaya katkı sağlayabiliyorlar.\neBird verilerini siteye üye olduktan sonra, en altta, Bilim başlığı altındaki Veri indirme talebi sayfasından ya da {rebird} paketini kullanarak indirebilirsiniz. Ben, site üzerinden tüm Türkiye verilerini indirdim.\nİlk adım olarak indirdiğimiz eBird verisini R’a yükleyelim. Bu veri txt formatında olduğu için, {tidyverse} paket grubuna ait read_delim() fonksiyonunu kullandık. Base R’daki read.table() fonksiyonu da bu iş için kullanılabilir. Veri biraz büyük olduğundan yüklenmesi ve işlenmesi biraz zaman alabilir.\n\nebird &lt;- read_delim(\"./ebird/ebd_TR_relApr-2023.txt\")\n\n\nprint(ebird)\n\n# A tibble: 2,403,720 × 50\n   `GLOBAL UNIQUE IDENTIFIER`     `LAST EDITED DATE`  `TAXONOMIC ORDER` CATEGORY\n   &lt;chr&gt;                          &lt;dttm&gt;                          &lt;dbl&gt; &lt;chr&gt;   \n 1 URN:CornellLabOfOrnithology:E… 2021-04-15 12:59:44             10043 species \n 2 URN:CornellLabOfOrnithology:E… 2021-04-15 12:58:56              5625 species \n 3 URN:CornellLabOfOrnithology:E… 2021-04-15 13:04:32              1361 species \n 4 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:13             22215 species \n 5 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32              5787 species \n 6 URN:CornellLabOfOrnithology:E… 2021-04-21 02:26:13             29239 species \n 7 URN:CornellLabOfOrnithology:E… 2021-04-14 00:03:35             22156 species \n 8 URN:CornellLabOfOrnithology:E… 2021-04-05 11:01:32               291 species \n 9 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n10 URN:CornellLabOfOrnithology:E… 2018-09-20 02:46:53              5945 species \n# ℹ 2,403,710 more rows\n# ℹ 46 more variables: `TAXON CONCEPT ID` &lt;chr&gt;, `COMMON NAME` &lt;chr&gt;,\n#   `SCIENTIFIC NAME` &lt;chr&gt;, `SUBSPECIES COMMON NAME` &lt;chr&gt;,\n#   `SUBSPECIES SCIENTIFIC NAME` &lt;chr&gt;, `EXOTIC CODE` &lt;chr&gt;,\n#   `OBSERVATION COUNT` &lt;chr&gt;, `BREEDING CODE` &lt;chr&gt;,\n#   `BREEDING CATEGORY` &lt;chr&gt;, `BEHAVIOR CODE` &lt;chr&gt;, `AGE/SEX` &lt;chr&gt;,\n#   COUNTRY &lt;chr&gt;, `COUNTRY CODE` &lt;chr&gt;, STATE &lt;chr&gt;, `STATE CODE` &lt;chr&gt;, …\n\n\nVerimizi R’a yükledikten sonra print() fonksiyonu ile veri setimizin temel yapısına bir göz attık. 2,403,720 gözlem (satır) ve 50 değişkene (sütun) sahip bir tibble karşımıza çıktı. tibble, {tidyverse}’e özel klasik data.frame’den daha kullanışlı bir veri yapısıdır. Özel bir data.frame diyebiliriz. Ancak bu kadar fazla değişkenimiz varken print() fonksiyonu yeterince işlevsel değil. Verinin büyük bir kısmını göremiyoruz. Bu sebeple, R’a yüklediğimiz veri tablosunun tüm sütunlarını ve onların yapılarını görmek için glimpse() fonksiyonunu kullanacağız. Bu fonksiyon, base R’daki str() fonksiyonuna benziyor ancak tibble veri yapısıyla kullanılırken daha sade ve kullanışlı. Özetle, bu fonksiyonu, print() fonksiyonunun transpoze edilmiş hâli olarak görebilirsiniz.\n\nglimpse(ebird)\n\nRows: 2,403,720\nColumns: 50\n$ `GLOBAL UNIQUE IDENTIFIER`   &lt;chr&gt; \"URN:CornellLabOfOrnithology:EBIRD:OBS112…\n$ `LAST EDITED DATE`           &lt;dttm&gt; 2021-04-15 12:59:44, 2021-04-15 12:58:56…\n$ `TAXONOMIC ORDER`            &lt;dbl&gt; 10043, 5625, 1361, 22215, 5787, 29239, 22…\n$ CATEGORY                     &lt;chr&gt; \"species\", \"species\", \"species\", \"species…\n$ `TAXON CONCEPT ID`           &lt;chr&gt; \"avibase-4F404CB9\", \"avibase-77845DAD\", \"…\n$ `COMMON NAME`                &lt;chr&gt; \"Indian Roller\", \"Siberian Crane\", \"Black…\n$ `SCIENTIFIC NAME`            &lt;chr&gt; \"Coracias benghalensis\", \"Leucogeranus le…\n$ `SUBSPECIES COMMON NAME`     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SUBSPECIES SCIENTIFIC NAME` &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EXOTIC CODE`                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `OBSERVATION COUNT`          &lt;chr&gt; \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"…\n$ `BREEDING CODE`              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BREEDING CATEGORY`          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BEHAVIOR CODE`              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `AGE/SEX`                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ COUNTRY                      &lt;chr&gt; \"Türkiye\", \"Türkiye\", \"Türkiye\", \"Türkiye…\n$ `COUNTRY CODE`               &lt;chr&gt; \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\", \"TR\",…\n$ STATE                        &lt;chr&gt; \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbu…\n$ `STATE CODE`                 &lt;chr&gt; \"TR-41\", \"TR-06\", \"TR-34\", \"TR-34\", \"TR-3…\n$ COUNTY                       &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `COUNTY CODE`                &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `IBA CODE`                   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `BCR CODE`                   &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `USFWS CODE`                 &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `ATLAS BLOCK`                &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ LOCALITY                     &lt;chr&gt; \"Haydarpasa-Izmit Yolu\", \"Ankara\", \"Istan…\n$ `LOCALITY ID`                &lt;chr&gt; \"L14466142\", \"L14465903\", \"L14465858\", \"L…\n$ `LOCALITY TYPE`              &lt;chr&gt; \"P\", \"P\", \"P\", \"H\", \"H\", \"H\", \"P\", \"H\", \"…\n$ LATITUDE                     &lt;dbl&gt; 40.78331, 39.92951, 41.00805, 40.99209, 3…\n$ LONGITUDE                    &lt;dbl&gt; 29.47437, 32.85443, 28.97673, 28.83948, 3…\n$ `OBSERVATION DATE`           &lt;date&gt; 1875-06-01, 1879-04-01, 1890-12-01, 1896…\n$ `TIME OBSERVATIONS STARTED`  &lt;time&gt;       NA,       NA,       NA,       NA, …\n$ `OBSERVER ID`                &lt;chr&gt; \"obsr1979154\", \"obsr1979154\", \"obsr197915…\n$ `SAMPLING EVENT IDENTIFIER`  &lt;chr&gt; \"S85596027\", \"S85594679\", \"S85597213\", \"S…\n$ `PROTOCOL TYPE`              &lt;chr&gt; \"Historical\", \"Historical\", \"Historical\",…\n$ `PROTOCOL CODE`              &lt;chr&gt; \"P62\", \"P62\", \"P62\", \"P62\", \"P62\", \"P62\",…\n$ `PROJECT CODE`               &lt;chr&gt; \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIR…\n$ `DURATION MINUTES`           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT DISTANCE KM`         &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `EFFORT AREA HA`             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `NUMBER OBSERVERS`           &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, 1, 1, 1, …\n$ `ALL SPECIES REPORTED`       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ `GROUP IDENTIFIER`           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `HAS MEDIA`                  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ APPROVED                     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REVIEWED                     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ REASON                       &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `TRIP COMMENTS`              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `SPECIES COMMENTS`           &lt;chr&gt; \"Collected (Sclator & Taylor, 1876)., Kir…\n$ ...50                        &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\nBu fonksiyon sayesinde sütunları çok daha rahat bir şekilde görebiliyoruz. Gördüğünüz gibi bu yazı için işimize yaramayacak olan bir sürü sütun var. Kalabalıkta kaybolmamak için yalnızca işimize yarayabilecek sütunları seçelim. Ardından da sadece tür kaydı olan gözlemleri seçmek için species’e göre filtreleyelim.\n\nebird_subset &lt;- ebird |&gt;\n  select(4, 6, 7, 11, 12, 18, 29, 30) |&gt;  # burada indeks kullanarak sectik, sutun isimleriyle de secebiliriz\n  filter(CATEGORY == \"species\")\nebird_subset\n\n# A tibble: 2,298,920 × 8\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n   &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;          \n 1 species  Indian Roller  Coracias benghal… 1                   &lt;NA&gt;           \n 2 species  Siberian Crane Leucogeranus leu… X                   &lt;NA&gt;           \n 3 species  Black Grouse   Lyrurus tetrix    X                   &lt;NA&gt;           \n 4 species  White-winged … Alauda leucoptera 1                   &lt;NA&gt;           \n 5 species  White-tailed … Vanellus leucurus 2                   &lt;NA&gt;           \n 6 species  Mourning Whea… Oenanthe lugens   1                   &lt;NA&gt;           \n 7 species  Black Lark     Melanocorypha ye… 1                   &lt;NA&gt;           \n 8 species  Brant          Branta bernicla   1                   &lt;NA&gt;           \n 9 species  Slender-bille… Numenius tenuiro… 2                   &lt;NA&gt;           \n10 species  Slender-bille… Numenius tenuiro… 1                   &lt;NA&gt;           \n# ℹ 2,298,910 more rows\n# ℹ 3 more variables: STATE &lt;chr&gt;, LATITUDE &lt;dbl&gt;, LONGITUDE &lt;dbl&gt;\n\n\n\nglimpse(ebird_subset)\n\nRows: 2,298,920\nColumns: 8\n$ CATEGORY            &lt;chr&gt; \"species\", \"species\", \"species\", \"species\", \"speci…\n$ `COMMON NAME`       &lt;chr&gt; \"Indian Roller\", \"Siberian Crane\", \"Black Grouse\",…\n$ `SCIENTIFIC NAME`   &lt;chr&gt; \"Coracias benghalensis\", \"Leucogeranus leucogeranu…\n$ `OBSERVATION COUNT` &lt;chr&gt; \"1\", \"X\", \"X\", \"1\", \"2\", \"1\", \"1\", \"1\", \"2\", \"1\", …\n$ `BREEDING CODE`     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ STATE               &lt;chr&gt; \"Kocaeli\", \"Ankara\", \"İstanbul\", \"İstanbul\", \"Hata…\n$ LATITUDE            &lt;dbl&gt; 40.78331, 39.92951, 41.00805, 40.99209, 36.35517, …\n$ LONGITUDE           &lt;dbl&gt; 29.47437, 32.85443, 28.97673, 28.83948, 36.31517, …\n\n\nGördüğünüz gibi verinin işimize yarayacak bir alt kümesini aldık, kalabalıktan kurtulduk.\nArtık ilk yüklediğimiz veriyi (ebird) R’dan silebiliriz. Veri, tüm TR’yi kapsadığı için 2 milyondan fazla gözlem içeriyor. Büyük veri setleri RAM’in şişmesine ve R’ın çökmesine sebep olabilir. Bu sebeple artık işimize yaramayacak olan verileri environment’ten kaldıralım.\n\nrm(ebird)"
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#kuş-verisinin-mekânsallıştırılması",
    "href": "posts/ebird_R/ebird_r.html#kuş-verisinin-mekânsallıştırılması",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "3. Kuş verisinin mekânsallıştırılması",
    "text": "3. Kuş verisinin mekânsallıştırılması\nKuş verisinin ihtiyacımız olan alt kümesini aldıktan sonra sıra geldi verimizi mekânsallaştırmaya. Verimizi, uygun mekânsal veri tipine dönüştürüp, mekânsal analizlerde kullanılabilecek bir hâle getireceğiz. Bunun için, R’da mekânsal vektör verileri işlemek için geliştirilen {sf} paketini kullanacağız.\nLat long verisini ve koordinat sistemini tanımlayarak eBird verisini sf objesine dönüştürelim.\n\nebird_sf &lt;- st_as_sf(\n    ebird_subset, coords = c(\"LONGITUDE\", \"LATITUDE\"), crs = \"EPSG:4326\"\n)\nebird_sf\n\nSimple feature collection with 2298920 features and 6 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 2,298,920 × 7\n   CATEGORY `COMMON NAME`  `SCIENTIFIC NAME` `OBSERVATION COUNT` `BREEDING CODE`\n * &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;             &lt;chr&gt;               &lt;chr&gt;          \n 1 species  Indian Roller  Coracias benghal… 1                   &lt;NA&gt;           \n 2 species  Siberian Crane Leucogeranus leu… X                   &lt;NA&gt;           \n 3 species  Black Grouse   Lyrurus tetrix    X                   &lt;NA&gt;           \n 4 species  White-winged … Alauda leucoptera 1                   &lt;NA&gt;           \n 5 species  White-tailed … Vanellus leucurus 2                   &lt;NA&gt;           \n 6 species  Mourning Whea… Oenanthe lugens   1                   &lt;NA&gt;           \n 7 species  Black Lark     Melanocorypha ye… 1                   &lt;NA&gt;           \n 8 species  Brant          Branta bernicla   1                   &lt;NA&gt;           \n 9 species  Slender-bille… Numenius tenuiro… 2                   &lt;NA&gt;           \n10 species  Slender-bille… Numenius tenuiro… 1                   &lt;NA&gt;           \n# ℹ 2,298,910 more rows\n# ℹ 2 more variables: STATE &lt;chr&gt;, geometry &lt;POINT [°]&gt;\n\n\nVerimizi sf formatına dönüştürdüğümüzde, bazı önemli mekânsal özelliklerin eklenmiş olduğunu görüyoruz. Bunlar arasında geometri tipi (POINT), veri boyutu (dimension), verinin coğrafi sınırlarını tanımlayan bounding box koordinatları ve koordinat referans sistemi (CRS) bulunuyor. Bundan sonra mekânsal analizleri rahatça yapabiliriz.\nDikkat ederseniz verinin her bir satırı, bir koordinat çiftiyle ilişkili. Bu, her bir satırın ve bu satırdaki tüm bilgilerin, bir geometriyle ilişkili olduğunu gösteriyor. Bu geometri de, geometri tipinde belirtildiği ya da bir koordinat çiftinin varlığından anlayabileceğimiz gibi nokta. Yani 2,298,920 tane noktamız var ve her bir nokta bir gözlemle ilişkili."
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#tr-il-katmanının-yüklenmesi",
    "href": "posts/ebird_R/ebird_r.html#tr-il-katmanının-yüklenmesi",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "4. TR il katmanının yüklenmesi",
    "text": "4. TR il katmanının yüklenmesi\neBird verisini mekânsallaştırdığımıza göre sıra geldi TR il sınırlarını R’a yüklemeye. Ben geoBoundaries veri tabanını kullanıyorum. İhtiyaç duyduğunuz mülki idare sınırları verisinine erişmek için bu linki ya da {rgeoboundaries} paketini kullanabilirsiniz.\n\ntr_il &lt;- gb_adm1(country = \"Turkey\", type = \"SSCGS\") # type = \"SSCGS\" argumaniyla basitlestirilmiş versiyonunu indiriyoruz\ntr_il\n\nSimple feature collection with 81 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25.66545 ymin: 35.80768 xmax: 44.81766 ymax: 42.1048\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeGroup shapeType      shapeName shapeISO                 shapeID\n1         TUR      ADM1          Adana    TR-01 25984515B95172477822815\n2         TUR      ADM1       Adıyaman    TR-02 25984515B90872828599679\n3         TUR      ADM1 Afyonkarahisar    TR-03 25984515B26209284550223\n4         TUR      ADM1           Ağrı    TR-04 25984515B39003465173278\n5         TUR      ADM1         Amasya    TR-05 25984515B32583172380009\n6         TUR      ADM1        Antalya    TR-07 25984515B97476213604692\n7         TUR      ADM1         Artvin    TR-08  25984515B1602304411378\n8         TUR      ADM1          Aydın    TR-09 25984515B63739470532168\n9         TUR      ADM1      Balıkesir    TR-10 25984515B55384476443375\n10        TUR      ADM1         Ankara    TR-06 25984515B47806653651907\n   shapeCanonical                       geometry\n1        province MULTIPOLYGON (((34.91146 36...\n2        province MULTIPOLYGON (((37.861 37.4...\n3        province MULTIPOLYGON (((30.48061 38...\n4        province MULTIPOLYGON (((43.77542 39...\n5        province MULTIPOLYGON (((36.3878 40....\n6        province MULTIPOLYGON (((30.40305 36...\n7        province MULTIPOLYGON (((41.87016 40...\n8        province MULTIPOLYGON (((27.33197 37...\n9        province MULTIPOLYGON (((26.7224 39....\n10       province MULTIPOLYGON (((31.96673 38...\n\n\nBase R plot() fonksiyonu ile tr_il objemizi çizelim.\n\nplot(tr_il)\n\n\n\n\nGördüğünüz gibi sf objesi için plot() fonksiyonu, tüm değişkenleri (sütunları) çiziyor. Sadece shapeName değişkenini seçip, eksenleri ve başlığı ekleyerek daha iyi bir Türkiye il sınırları haritası çizelim.\n\nplot(tr_il[, \"shapeName\"], graticule = TRUE, axes = TRUE, main = \"Türkiye Haritası\")\n\n\n\n\nHop! Çok daha iyi!\nArtık kuş verimizin Türkiye üzerindeki dağılımını incelemeye başlama vakti geldi. Ancak 2 milyondan fazla satırı olan bir verinin grafiğini çizmek muhtemelen R’ın çökmesiyle sonuçlanacaktır. Bu yüzden bu verinin bir alt kümesini alalım.\n\nebird_sample &lt;- sample_n(ebird_sf, 500000)\n\nVeri tablomuzdan rastgele 500000 satır seçtik. Bu sayı bilgisayarınız için fazla geliyorsa 5-10b de seçebilirsiniz.\nVerimizi, bu sefer de R’ın vazgeçilmez paketi olan {ggplot2} ile görselleştirelim. ggplot2, çizeceğimiz verileri katman katman belirtip + ile birbirine bağlamamıza izin veren oldukça esnek bir paket. Şimdi haritamızı çizelim.\n\nggplot() +                                       # grafigi baslatiyor\n  geom_sf(data = tr_il, aes()) +                 # tr katmanini ekliyoruz\n  geom_sf(data = ebird_sample, aes(), size = .5) # kus verimizi ekliyoruz\n\n\n\n\n500000 kuş gözlem verisinin Türkiye’deki dağılımı bu şekildeymiş. Bu grafiğe dayanarak, ülkenin batısında ve büyükşehirlerde daha çok gözlem olduğunu söyleyebiliriz. Bu genel dağılımı gördüğümüze göre merak ettiğim 2 türün dağılımına bakmak istiyorum. Veriyi tür ismine göre filtreleyip haritayı çiziyoruz.\n\nSakallı Akbaba\n\n\n\nAlbum of Abyssinian birds and mammals | Chicago :Field Museum of Natural History,1930.\n\n\nSakallı akbaba - Gypaetus barbatus, sarp dağların insandan uzak köşelerinde; genellikle kanyonlar ve derin yarlarda yaşayan bir akbaba türü. Kendine has görünüşü ve diyetinin kemikten oluşması sebebiyle oldukça ilgi çekici bir tür. Nesli tehdit altındaki bu nadir türün Türkiye’deki dağılımına bir bakalım.\n\nsakalli &lt;- ebird_sf |&gt; \n  filter(`SCIENTIFIC NAME` == \"Gypaetus barbatus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = sakalli, aes(), size = .7)\n\n\n\n\nGördüğünüz gibi sakallı akbabanın Türkiye’deki dağılımı Köroğlu Dağları, Aladağlar, Kaçkar Dağları, Akdağ gibi dağlık alanlarda yoğunlaşıyor.\n\n\nKızıl Akbaba\n\n\n\nColoured figures of the birds of the British Islands. v.1 | London :R. H. Porter,1885-1897.\n\n\nKızıl akbaba - Gyps fulvus da dağları tercih eden ve kayalıklarda yuvalayan bir tür. Kızıl akbaba, sakallı akbaba kadar çekingen olmayan, genellikle koloni hâlinde yaşayan bir tür. Şimdi de kızıl akbabanın dağılımına bir bakalım. Acaba nerelerden kayıtlar gelmiş!\n\nkizil &lt;- ebird_sf |&gt; \n  filter(`SCIENTIFIC NAME` == \"Gyps fulvus\")\n\n\nggplot() +\n  geom_sf(data = tr_il, aes()) +\n  geom_sf(data = kizil, aes(), size = .7)\n\n\n\n\nKızıl akbaba dağılımının, üreme ve göç bölgelerinde yoğunlaşan bir örüntü sergilediğini görebiliyoruz."
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#kuş-verisinin-gruplanıp-özetlenmesi",
    "href": "posts/ebird_R/ebird_r.html#kuş-verisinin-gruplanıp-özetlenmesi",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "5. Kuş verisinin gruplanıp özetlenmesi",
    "text": "5. Kuş verisinin gruplanıp özetlenmesi\nBiraz oyalanmanın ardından tekrardan sorumuza odaklanabiliriz. Öncelikle Türkiye’deki kuş türlerini ve her türden kaç adet kayıt olduğunu görmek için kuş verisini tür ismine göre gruplayıp, kayıt sayısına göre özetleyelim. Bu işlem biraz uzun sürebilir.\n\nebird_grouped &lt;- ebird_sf |&gt;\n  group_by(`SCIENTIFIC NAME`) |&gt;\n  summarise(n = n())\nprint(ebird_grouped)\n\nSimple feature collection with 503 features and 2 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 25.78258 ymin: 34.58944 xmax: 44.78608 ymax: 42.93267\nGeodetic CRS:  WGS 84\n# A tibble: 503 × 3\n   `SCIENTIFIC NAME`             n                                      geometry\n   &lt;chr&gt;                     &lt;int&gt;                                &lt;GEOMETRY [°]&gt;\n 1 Acanthis flammea              1                     POINT (32.87976 39.96636)\n 2 Accipiter badius              3 MULTIPOINT ((41.23051 37.10523), (39.85856 4…\n 3 Accipiter brevipes         2157 MULTIPOINT ((26.218 40.00467), (26.20626 40.…\n 4 Accipiter gentilis         1617 MULTIPOINT ((26.16617 39.819), (26.20626 40.…\n 5 Accipiter nisus           17281 MULTIPOINT ((26.01417 39.80894), (25.89106 4…\n 6 Acridotheres tristis        792 MULTIPOINT ((28.56435 41.1764), (28.61338 40…\n 7 Acrocephalus agricola       355 MULTIPOINT ((42.41 38.7), (42.42388 38.70286…\n 8 Acrocephalus arundinaceus  6899 MULTIPOINT ((25.89106 40.15504), (26.16617 3…\n 9 Acrocephalus dumetorum       25 MULTIPOINT ((35.95475 36.06548), (39.72347 4…\n10 Acrocephalus griseldis        1                       POINT (43.578 40.11865)\n# ℹ 493 more rows\n\n\n\nglimpse(ebird_grouped)\n\nRows: 503\nColumns: 3\n$ `SCIENTIFIC NAME` &lt;chr&gt; \"Acanthis flammea\", \"Accipiter badius\", \"Accipiter b…\n$ n                 &lt;int&gt; 1, 3, 2157, 1617, 17281, 792, 355, 6899, 25, 1, 2164…\n$ geometry          &lt;GEOMETRY [°]&gt; POINT (32.87976 39.96636), MULTIPOINT ((41.…\n\n\nGördüğünüz gibi eBird veri tabanında Türkiye’den kayıtlı 503 tür varmış. eBird’ün internet sitesinde ise 494 adet tür gösteriyor. Bu farklılığın sebebi nedir bilmiyorum doğrusu. Aklıma, kesin olmayan bazı kayıtların da olabileceği geliyor sadece. Bilenler açıklayabilirse süper olur."
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#her-bir-il-sınırı-içinde-kalan-tür-sayısının-hesaplanması",
    "href": "posts/ebird_R/ebird_r.html#her-bir-il-sınırı-içinde-kalan-tür-sayısının-hesaplanması",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "6. Her bir il sınırı içinde kalan tür sayısının hesaplanması",
    "text": "6. Her bir il sınırı içinde kalan tür sayısının hesaplanması\nŞimdi, Türkiye’deki her bir ilin sınırları içine düşen kuş gözlem noktalarını sayacağız. Yani her bir poligonun içindeki noktaları sayacağız. Bu da bize her bir ildeki toplam tür sayısını verecek. Öncelikle st_intersects() fonksiyonu ile her bir il ile kesişen noktaları belirliyoruz. Ardından lengths() fonksiyonu ile her bir ilde kaç adet nokta olduğunu hesaplıyoruz ve bunu, tr_il verisine yeni bir sütun olarak ekliyoruz. Temelde çok basit bir işlem ama başta anlamak zor olabiliyor.\n\ntr_il$bird_count &lt;- lengths(st_intersects(tr_il, ebird_grouped))"
  },
  {
    "objectID": "posts/ebird_R/ebird_r.html#verinin-görselleştirilmesi",
    "href": "posts/ebird_R/ebird_r.html#verinin-görselleştirilmesi",
    "title": "R ve Kuşlar - eBird Verilerinin R ile Analizi I",
    "section": "7. Verinin görselleştirilmesi",
    "text": "7. Verinin görselleştirilmesi\nŞimdi, hızlıca bir plotlayalım. Bunun için plot() fonksiyonunu kullacağız. tr_il içindeki bird_count sütununu seçelim.\n\nplot(tr_il[, \"bird_count\"])\n\n\n\n\nHaritamız hazır. Şimdi daha iyi bir görselleştirme için ggplot() fonksiyonunu kullanalım.\nÖncelikle kırılımlarımızı belirleyelim ki haritamız daha güzel görünsün. Bunun için jenks optimizasyonunu kullanacağız.\n\nbreaks &lt;- classInt::classIntervals(\n  tr_il$bird_count,\n  n = 7,\n  style = \"jenks\"\n)\n\n\nggplot() +                                     # grafigi baslatiyor\n  geom_sf(\n    data = tr_il,                              # tr katmanini ekliyoruz\n    aes(fill = bird_count),                    # renkleri kus turu sayisina gore seciyoruz\n    colour = \"grey12\",                         # il sinirlarinin rengini belirliyoruz\n    linewidth = .1                             # il sinirlarinin kalinligini belirliyoruz\n  ) +\n  scale_fill_viridis_c(breaks = breaks$brks) + # haritamizi viridis paletiyle dolduruyoruz\n  guides(                                      # lejant ozelliklerini seciyoruz\n    fill = guide_colorsteps(\n      barwidth = 20,\n      barheight = .5,\n      title.position = \"right\"\n    )\n  ) +\n  labs(                                        # etiketleri yaziyoruz\n    title = \"İllere Göre Kuş Türü Sayısı\",\n    x = \"Boylam\",\n    y = \"Enlem\"\n  ) +\n  theme_bw() +                                 # tema seciyoruz\n  theme(                                       # temanın ozellliklerini berlirliyoruz\n    legend.position = \"bottom\",\n    plot.background = element_rect(\"white\", colour = \"white\"),\n    text = element_text(family = \"Ubuntu Mono\"),\n    legend.title = element_blank()\n  )\n\n\n\n\nGördüğünüz gibi çok daha iyi bir görselleştirme oldu. Şu an elimizde, Türkiye’deki illere göre kuş türü sayısını gösteren bir harita bulunmakta. Ancak bu harita üzerinden yapacağımız yorumlarda dikkatli olmamız gereken birkaç önemli nokta var. İl yüzölçümünün ve illere göre gözlem sayısının farklı olmasından kaynaklanan yanlılık (bias) potansiyeli. Bu harita genel fikirler verebilir ancak net çıkarımlar için verinin standartlaştırılması ve istatistiki testlere tabi tutulması önem arz etmektedir.\nİkinci yazıda görüşmek dileğiyle.\nBilimle ve huzurla kalınız."
  },
  {
    "objectID": "posts/get_terrain_R/get_terrain.html",
    "href": "posts/get_terrain_R/get_terrain.html",
    "title": "R ile Topografik Harita - DEM Verisi İndirme ve Görselleştirme",
    "section": "",
    "text": "Merhabalar, blogun üçüncü yazısına hoş geldiniz. Takıldığınız ve anlamadığınız yerler olursa lütfen yorum yapmaya çekinmeyiniz. Ayrıca katkılarınızı ve eleştirilerinizi de bekliyorum. Keyifli okumalar.\nBlogdaki son yazımın üzerinden neredeyse 15 ay geçti. Bu “kısacık” zamana nişan, evlilik ve tezi -özellikle de tezi- sıkıştırınca başımı kaşıyacak vakit bile bulamadım. Ardından da esiri olduğum mükemmelliyetçilik eklenince bu yazının çıkışı bugünü buldu. Yani anlayacağınız yine bahanelerim var. :)\nBir önceki yazıyı okuyanlar hatırlayacaktır; DEM verisinden eğim ve bakı hesaplamış, kara akbaba gözlem noktalarındaki değerleri çekmiş ve görselleştirmiştik. Bu yazıda ise R kullanarak DEM verisini nasıl indirebileceğimizi göreceğiz. Ardından da base R kullanarak görselleştirmeler yapacağız.\nBu yazı, öncekilerden daha kısa ve öz olacak."
  },
  {
    "objectID": "posts/get_terrain_R/get_terrain.html#yazının-akışı",
    "href": "posts/get_terrain_R/get_terrain.html#yazının-akışı",
    "title": "R ile Topografik Harita - DEM Verisi İndirme ve Görselleştirme",
    "section": "Yazının Akışı",
    "text": "Yazının Akışı\n\nPaketlerin yüklenmesi\nDEM verisinin indirilmesi\nVerinin görselleştirilmesi"
  },
  {
    "objectID": "posts/get_terrain_R/get_terrain.html#paketlerin-yüklenmesi",
    "href": "posts/get_terrain_R/get_terrain.html#paketlerin-yüklenmesi",
    "title": "R ile Topografik Harita - DEM Verisi İndirme ve Görselleştirme",
    "section": "1. Paketlerin yüklenmesi",
    "text": "1. Paketlerin yüklenmesi\nHangi paketleri kullanacağımıza geçmeden önce size R programlama konusunda geçirdiğim zihinsel değişimden bahsetmek istiyorum. R öğrenmeye başladığımda -olması gerektiği gibi- ilk olarak R programlamanın temellerini öğrenmiş, ardından R ile veri analizine geçmiştim. Sonrasında arkadaşım ve saygıdeğer hocam İsmail’in (kendisi benim ilk R hocam ve yardımcı tez danışmanım oluyor) önerileriyle tidyverse kullanmaya başladım. tidyverse, daha önceki yazılarda da bahsettiğim gibi, veri işlerini standartlaştıran bir paket koleksiyonu. İçerisinde düzenli veri - tidy data prensiplerine dayanan, R ile veri işlemeyi standart ve daha kolay bir hâle getiren ggplot2, dplyr, readr, tidyr, tibble gibi çok sayıda paket bulunuyor. O günden bugüne işlerimin büyük bir kısmında bu paketleri kullandım. Bu süreç, veri analizi konusunda bana çok şey öğretti; düzenli veri prensiplerini, onları uygulamayı ve R’ın en popüler paketlerinden tidyverse’yi öğrendim. Geçtiğimiz ocak ayında ise programlama konusundaki fikirlerimde bazı değişiklikler oldu ve büyük oranda base R kullanmaya başladım. Bu kararı, tidyverse’nin kötü, yetersiz bir paket olduğunu düşündüğüm için almadım. Kendileri veri işlemede büyük kolaylıklar sağlayan, işlevsel bir paket. Mesela ggplot2’nin yeri kolay kolay doldurulamaz. Ancak R, hâlihazırda veri analizi ve istatistik için geliştirilmiş bir dil ve bu işler için yerli olan çok sayıda araç barındırıyor. base R kullanarak hiçbir bağımlılık, hiçbir yeni paket gerekmeden birçok işinizi kolaylıkla görebilirsiniz. Ağırlıkla C ve Fortran gibi dillerle yazılmış olan base R fonksiyonları doğru kullanıldığında ışık hızında çalışabiliyor. Ta ki tekrarlanan işler için döngüler ya da apply() gibi fonksiyonlar kullanana kadar. Ben de olabildiğince daha az bağımlıkla çalışmak, R’ın yerli gücünden yararlanmak ve analizin yanı sıra programlamaya da ağırlık vermek amacıyla çoğunlukla base R kullanmaya başladım. Yanlış anlaşılmasın, paket kullanmaya ya da tidyverse’ye karşı değilim. Sadece base R ile kolaylıkla yapabileceğim şeyler için neden paket kullanayım? Eğer base R yeterince etkili bir seçenek değilse diğer paketlerden yararlanırım.\nNeyse sözü fazla uzattım. Şimdi bu iş için kullanacağımız paketleri yükleyebiliriz. Eğer bilgisayarınızda yüklü olmayan bir paket varsa install.packages() fonksiyonunu kullanarak yükleyebilirsiniz. Bu yazı için toplamda iki paket kullanacağız: terra ve geodata. Ben mekânsal vektör işlerinde genellikle sf paktini kullanıyorum ancak bu sefer hem vektör hem de raster veriler için terra paketini kullanacağız. Mülki idare sınırları ve sayısal yükseklik modellerine erişmek için de geodata paketini kullanacağız. Bu paket de raster, terra, dismo gibi birçok önemli R paketini yazan Robert Hijmans’ın yazdığı bir paket.\n\n# paketleri R'a yukle\nlibs &lt;- c(\n  \"terra\",  # mekansal raster ve vektor verileri islemek icin, {raster}'in halefi\n  \"geodata\" # bazi mekansal verilere erismek icin \n)\nsapply(libs, require, character.only = TRUE)\n\n  terra geodata \n   TRUE    TRUE"
  },
  {
    "objectID": "posts/get_terrain_R/get_terrain.html#dem-verisinin-indirilmesi",
    "href": "posts/get_terrain_R/get_terrain.html#dem-verisinin-indirilmesi",
    "title": "R ile Topografik Harita - DEM Verisi İndirme ve Görselleştirme",
    "section": "2. DEM verisinin indirilmesi",
    "text": "2. DEM verisinin indirilmesi\nDEM verisinden önceki yazıda kısaca bahsetmiştim. Tekrardan hatırlamakta fayda var. DEM (Digital Elevation Model), kısaca, yeryüzünün yükseklik bilgisini sayısal olarak temsil eden modele verilen isim. Her bir grid için, sahip olduğu yükseklik verisini barındıran bu veri, topografik ve hidrolojik birçok analizde sıklıkla kullanılıyor.\nBu yazıda SRTM verisini, geodata paketini kullanarak indireceğiz. Bu paket ile, GADM, SRTM, Worldclim, OSM gibi birçok farklı veriyi kolaylıkla indirebiliriz.\nÖncelikle paketin içerdiği fonksiyonlara bir bakalım.\n\nls(\"package:geodata\")\n\n [1] \"bio_oracle\"          \"cmip6_tile\"          \"cmip6_world\"        \n [4] \"country_codes\"       \"crop_calendar_sacks\" \"crop_monfreda\"      \n [7] \"crop_spam\"           \"cropland\"            \"elevation_30s\"      \n[10] \"elevation_3s\"        \"elevation_global\"    \"footprint\"          \n[13] \"gadm\"                \"geodata_path\"        \"landcover\"          \n[16] \"monfredaCrops\"       \"osm\"                 \"population\"         \n[19] \"rice_calendar\"       \"sacksCrops\"          \"soil_af\"            \n[22] \"soil_af_elements\"    \"soil_af_isda\"        \"soil_af_water\"      \n[25] \"soil_world\"          \"soil_world_vsi\"      \"sp_genus\"           \n[28] \"sp_occurrence\"       \"sp_occurrence_split\" \"spamCrops\"          \n[31] \"travel_time\"         \"world\"               \"worldclim_country\"  \n[34] \"worldclim_global\"    \"worldclim_tile\"     \n\n\nBizim işimize yarayacak fonkiyon elevation_30s(). Ülke kodu için country argümanını, DEM verisinin Türkiye sınırlarına göre maskelemek için mask argümanını ve veriyi kaydeceğimiz yer için ise path argümanını kullanıyoruz. Ben tempfile() fonksiyonu ile geçici bir dosya oluşturdum. Dilerseniz yereldeki herhangi bir dizine de kaydedebilirsiniz.\n\ndem &lt;- elevation_30s(country = \"TUR\", mask = TRUE, path = tempfile())\ndem\n\nclass       : SpatRaster \ndimensions  : 792, 2340, 1  (nrow, ncol, nlyr)\nresolution  : 0.008333333, 0.008333333  (x, y)\nextent      : 25.5, 45, 35.7, 42.3  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : TUR_elv_msk.tif \nname        : TUR_elv_msk \nmin value   :         -42 \nmax value   :        4972 \n\n\n\nnrow(dem) * ncol(dem)\n\n[1] 1853280\n\n\nVerinin çıktısında birçok temel bilgiye erişebiliriz. Gördüğünüz gibi veri SpatRaster sınıfında; satır sayısı 792, sütun sayısı 2340 olan, toplamda 1853280 hücreden oluşuyor. Çözünürlüğü 0.008333333 derece, yani yaklaşık 1 km diyebiliriz. Verinin extent’i Türkiye sınırlarını kapsıyor. Minimum değer -42 m, iken maksimum değer 4972 m. Yaklaşık 1 km çözünürlüğe sahip olduğunu düşündüğümüzde neredeyse Ağrı Dağı’nın 5137 metrelik rakımını yakalıyormuş. Gayet iyi.\nVerinin minimum değeri -42 metreden başladığı için reclassify etmek istiyorum. 0’dan küçük olan tüm değerleri 0’a eşitleyeceğim. Bunu terra paketi içindeki classify() fonksiyonu ile yapabiliriz.\n\ndem &lt;- classify(\n  dem, \n  rcl = matrix(c(-Inf, 0, 0), ncol = 3, byrow = TRUE)\n)\ndem\n\nclass       : SpatRaster \ndimensions  : 792, 2340, 1  (nrow, ncol, nlyr)\nresolution  : 0.008333333, 0.008333333  (x, y)\nextent      : 25.5, 45, 35.7, 42.3  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource(s)   : memory\nvarname     : TUR_elv_msk \nname        : TUR_elv_msk \nmin value   :           0 \nmax value   :        4972 \n\n\nGördüğünüz gibi minimum değer artık 0’dan başlıyor.\nŞimdi basitçe görselleştirelim.\n\nplot(dem)\n\n\n\n\n\n\n\n\nBu hâliyle bile çok güzel görünüyor.\nŞimdi de eğim, bakı ve hillshade’i hesaplıyoruz.\n\nslp &lt;- terrain(dem, \"slope\", unit = \"radian\")\nasp &lt;- terrain(dem, \"aspect\", unit = \"radian\")\nhillshade &lt;- shade(\n  slp,\n  asp,\n  angle = 45,\n  direction = 300,\n  normalize = TRUE\n)\n\nBir bakalım nasıl görünüyorlar. Çoğu durumda plot(data) yeterince iyi sonuç veriyor ancak daha yüksek çözünürlüklü bir görüntü için maxcell argümanını değiştireceğim. İşlem biraz yavaşlayabilir.\n\nplot(slp, maxcell = prod(dim(slp))) # sutun ve satir sayisini carpip hucre sayisini hesapliyorum\n\n\n\n\n\n\n\n\n\nplot(asp, maxcell = prod(dim(asp)))\n\n\n\n\n\n\n\n\n\nplot(hillshade, maxcell = prod(dim(hillshade)), col = grey(0:100/100))\n\n\n\n\n\n\n\n\nŞimdi de mülki idare sınırları için GADM verilerini çekelim. GADM, Türkiye için sınır çözünürlüğü yüksek olan bir veri değil ancak yüksek sınır doğruluğu gerekmeyen işler için gayet kullanışlı. Tüm dünya verisini çekip, Türkiye’nin ve komşuların bir kısmının extent’inin koordinatlarına göre kırpıyoruz.\n\nadm &lt;- world(resolution = 1, path = tempfile())\next &lt;- vect(ext(c(25.7, 45.3, 35.5, 42.5)), crs = \"EPSG:4326\")\nadm &lt;- crop(adm, ext)\nadm\n\n class       : SpatVector \n geometry    : polygons \n dimensions  : 10, 2  (geometries, attributes)\n extent      : 25.7, 45.3, 35.5, 42.5  (xmin, xmax, ymin, ymax)\n coord. ref. : +proj=longlat +datum=WGS84 +no_defs \n names       : GID_0     NAME_0\n type        : &lt;chr&gt;      &lt;chr&gt;\n values      :   ARM    Armenia\n                 AZE Azerbaijan\n                 BGR   Bulgaria\n\n\n\nplot(adm)"
  },
  {
    "objectID": "posts/get_terrain_R/get_terrain.html#verinin-görselleştirilmesi",
    "href": "posts/get_terrain_R/get_terrain.html#verinin-görselleştirilmesi",
    "title": "R ile Topografik Harita - DEM Verisi İndirme ve Görselleştirme",
    "section": "3. Verinin görselleştirilmesi",
    "text": "3. Verinin görselleştirilmesi\nŞimdi güzel bir harita oluşturalım. Yazının en karmaşık kısmı nuhtemelen burası olacak. Daha önceki yazılarda, R’da grafikler için oldukça standart bir iş akışı sağlayan ggplot2 paketini kullanarak haritalar çizmiştik. Bu sefer ise base R kullanacağız. base R ile grafik çizdiğimiz zaman ilkin gözümüze yeterince iyi gelmeyebilir ancak biraz tecrübe kazandığımızda ne kadar esnek ve işlevsel olduğunu görebiliriz. ggplot2 kadar standart, karmaşık grafiklerde onun kadar kolay bir iş akışı sunmuyor ancak düşünüldüğü kadar zor değil ve çok daha esnek bir yapıya sahip. Neredeyse dilediğimiz hemen her şeyi çizebiliriz. Bazen çok az satırla bile süper işler çıkabiliyor. Bu aşamada yanlış ya da eksik yaptığım şeyler olursa yorum yapmaktan çekinmeyin lütfen.\nÖncelikle Türkiye ve çevre ülkelerin sınırlarının olduğu bir altlık harita çizelim.\n\nplot(\n  adm,                       # veri\n  lwd = 0.8,                 # cizgi kalinligi\n  xlim = c(26.1, 44.9),      # x eksinin sinirladigimiz aralik\n  ylim = c(35.7, 42.3),      # y eksinin sinirladigimiz aralik\n  border = \"grey\",           # poligon sinirlarinin rengi\n  background = \"lightblue\",  # deniz alanlarinin rengi\n  col = \"white\",             # kara alanlarinin rengi\n  axes = TRUE,               # eksenleri cizmek icin\n  mar = c(2, 1, 0, 1),       # plot'un marginlerini belirtiyor (alt, sol, ust, sag)\n  las = 1                    # en cok gozden kacan nokta, y eksenininin etiketlerini yatay yapiyor\n)\n\n\n\n\n\n\n\n\nŞimdi de kabartmasıyla ve konturlarıyla beraber topografik haritamızı çizelim.\n\nplot(\n  hillshade,\n  col = grey(0:100 / 100),\n  mar = c(5, 1, 0, 1),\n  maxcell = prod(dim(hillshade)),\n  legend = FALSE # rakimin lejantini cizmek icin burada cizmiyoruz\n)\nplot(\n  dem,\n  col = terrain.colors(255),\n  alpha = 0.5,\n  maxcell = prod(dim(dem)),\n  add = TRUE,               # ilk plot'un uzerine cizebilmek icin\n  legend = TRUE,\n  plg = list(               # terra::plot'ta lejant ayarlari icin\n    loc = \"bottom\",         # lejanti asagiya ciz\n    size = c(0.6, 0.7),     # lejant boyutu\n    cex = 0.8,              # yazi boyutu\n    at = seq(0, 4500, 500), # lejant etiketleri\n    tic = \"out\",            # lejanttaki cizgilerin pozisyonu\n    title = \"m\",            # baslik\n    title.cex = 0.8         # baslik boyutu\n  )\n)\ncontour(\n  dem, \n  lwd = 0.35, \n  labcex = 0.38, # label boyutu\n  col = scales::alpha(\"grey40\", 0.7), \n  add = TRUE\n)\n\n\n\n\n\n\n\n\nŞimdi de iki haritayı birleştirelim. Ancak bu sefer konturu çizmeyeceğim.\n\nplot.new() # yeni bir plot baslatmak icin\npar(family = \"OpenSans\") # font \nplot(\n  adm,\n  lwd = 0.8,\n  xlim = c(26.1, 44.9),\n  ylim = c(35.7, 42.3),\n  border = \"grey\",\n  background = \"lightblue\",\n  col = \"white\",\n  mar = c(5, 1, 0, 1),\n  axes = TRUE,\n  las = 1\n)\nplot(\n  hillshade,\n  col = grey(0:100/100),\n  maxcell = prod(dim(hillshade)),\n  legend = FALSE,\n  add = TRUE\n)\nplot(\n  dem,\n  col = terrain.colors(255),\n  alpha = 0.5,\n  maxcell = prod(dim(dem)),\n  add = TRUE,\n  legend = TRUE,\n  plg = list(\n    loc = \"bottom\",\n    size = c(0.6, 0.7),\n    cex = 0.8,\n    at = seq(0, 4500, 500),\n    tic = \"out\",\n    title = \"Rakım [m]\",\n    title.cex = 0.8\n  )\n)\nplot(adm, border = \"grey\", lwd = 0.8, add = TRUE) # sinirlari vurgulu cizmek icin tekrar ekledim\n\n\n\n\n\n\n\n\nFena olmadı. :) Biraz daha uğraşla daha iyi haritalar elde edilebilir. Özellikle de göl ve nehir katmanları eklenirse güzel olacaktır.\nŞimdi de Türkiye rakımının dağılımına bir bakalım. Bunun için histogram çizeceğim.\n\nplot.new()\npar(\n  mar = c(5, 5, 1, 1),\n  mgp = c(3.6, 1, 0),         # etiket uzakligini ayarliyoruz\n  las = 1, \n  family = \"OpenSans\", \n  bty = \"l\",                  # box'ın tipini L seklinde yapmak icin\n  cex.lab = 1.3,\n  xpd = NA                    # etiketi grafik sinirlari disina tasimaya izin verir\n)\nhist(\n  dem,\n  xlab = \"Rakım [m]\",         # x ekseninin etiketi\n  ylab = \"Sıklık\",            # y ekseninin etiketi\n  main = \"\",                  # baslik icin. \"\" bos yaparak basligi cizmiyorum\n  col = \"orange\",\n  breaks = seq(0, 4972, 100), # grafigin kirilimlari\n  density = 50                # kutularin icindeki tarama cizgisinin yogunlugu\n)\naxis(                         # x eksenindeki kucuk tikleri cizmek icin\n  side = 1,                   # alttaki x eksenine cizmek icin\n  at = seq(0, 4972, 100),     # kirilimlar\n  tck = -0.030 / 4,           # tik boyutu kucuk olsun\n  labels = FALSE              # etiket olmamasi icin\n) \nbox()                         # eksenlere kutu cizmek icin\n\n\n\n\n\n\n\n\nGrafik, sağa çarpık bir dağılım sergiliyor. Ortalama rakımın 1132 metre olduğu Türkiye’yi iyi temsil eden bir grafik oldu.\nBir sonraki yazıda görüşürüz.\nBilimle ve huzurla kalınız!"
  },
  {
    "objectID": "posts/dem/dem.html",
    "href": "posts/dem/dem.html",
    "title": "R ile Topografik Veri İndirme - DEM Verisi İndirme ve Görselleştirme",
    "section": "",
    "text": "Merhabalar, blogun üçüncü yazısına hoş geldiniz. Takıldığınız ve anlamadığınız yerler olursa lütfen yorum yapmaya çekinmeyiniz. Ayrıca katkılarınızı ve eleştirilerinizi de bekliyorum. Keyifli okumalar.\nBlogdaki son yazımın üzerinden neredeyse 15 ay geçti. Bu “kısacık” zamana nişan, evlilik ve tezi -özellikle de tezi- sıkıştırınca başımı kaşıyacak vakit bile bulamadım. Ardından da esiri olduğum mükemmelliyetçilik eklenince bu yazının çıkışı bugünü buldu. Yani anlayacağınız yine bahanelerim var. :)\nBir önceki yazıyı okuyanlar hatırlayacaktır; DEM verisinden eğim ve bakı hesaplamış, kara akbaba gözlem noktalarındaki değerleri çekmiş ve görselleştirmiştik. Bu yazıda ise R kullanarak DEM verisini nasıl indirebileceğimizi göreceğiz. Ardından da base R kullanarak görselleştirmeler yapacağız.\nBu yazı, öncekilerden daha kısa ve öz olacak."
  },
  {
    "objectID": "posts/dem/dem.html#yazının-akışı",
    "href": "posts/dem/dem.html#yazının-akışı",
    "title": "R ile Topografik Veri İndirme - DEM Verisi İndirme ve Görselleştirme",
    "section": "Yazının Akışı",
    "text": "Yazının Akışı\n\nPaketlerin yüklenmesi\nDEM verisinin indirilmesi\nVerinin görselleştirilmesi"
  },
  {
    "objectID": "posts/dem/dem.html#paketlerin-yüklenmesi",
    "href": "posts/dem/dem.html#paketlerin-yüklenmesi",
    "title": "R ile Topografik Veri İndirme - DEM Verisi İndirme ve Görselleştirme",
    "section": "1. Paketlerin yüklenmesi",
    "text": "1. Paketlerin yüklenmesi\nHangi paketleri kullanacağımıza geçmeden önce size R programlama konusunda geçirdiğim zihinsel değişimden bahsetmek istiyorum. R öğrenmeye başladığımda -olması gerektiği gibi- ilk olarak R programlamanın temellerini öğrenmiş, ardından R ile veri analizine geçmiştim. Sonrasında arkadaşım ve saygıdeğer hocam İsmail’in (kendisi benim ilk R hocam ve yardımcı tez danışmanım oluyor) önerileriyle tidyverse kullanmaya başladım. tidyverse, daha önceki yazılarda da bahsettiğim gibi, veri işlerini standartlaştıran bir paket koleksiyonu. İçerisinde düzenli veri - tidy data prensiplerine dayanan, R ile veri işlemeyi standart ve daha kolay bir hâle getiren ggplot2, dplyr, readr, tidyr, tibble gibi çok sayıda paket bulunuyor. O günden bugüne işlerimin büyük bir kısmında bu paketleri kullandım. Bu süreç, veri analizi konusunda bana çok şey öğretti; düzenli veri prensiplerini, onları uygulamayı ve R’ın en popüler paketlerinden tidyverse’yi öğrendim. Geçtiğimiz ocak ayında ise programlama konusundaki fikirlerimde bazı değişiklikler oldu ve büyük oranda base R kullanmaya başladım. Bu kararı, tidyverse’nin kötü, yetersiz bir paket olduğunu düşündüğüm için almadım. Kendileri veri işlemede büyük kolaylıklar sağlayan, işlevsel bir paket. Mesela ggplot2’nin yeri kolay kolay doldurulamaz. Ancak R, hâlihazırda veri analizi ve istatistik için geliştirilmiş bir dil ve bu işler için yerli olan çok sayıda araç barındırıyor. base R kullanarak hiçbir bağımlılık, hiçbir yeni paket gerekmeden birçok işinizi kolaylıkla görebilirsiniz. Ağırlıkla C ve Fortran gibi dillerle yazılmış olan base R fonksiyonları doğru kullanıldığında ışık hızında çalışabiliyor. Ta ki tekrarlanan işler için döngüler ya da apply() gibi fonksiyonlar kullanana kadar. Ben de olabildiğince daha az bağımlıkla çalışmak, R’ın yerli gücünden yararlanmak ve analizin yanı sıra programlamaya da ağırlık vermek amacıyla çoğunlukla base R kullanmaya başladım. Yanlış anlaşılmasın, paket kullanmaya ya da tidyverse’ye karşı değilim. Sadece base R ile kolaylıkla yapabileceğim şeyler için neden paket kullanayım? Eğer base R yeterince etkili bir seçenek değilse diğer paketlerden yararlanırım.\nNeyse sözü fazla uzattım. Şimdi bu iş için kullanacağımız paketleri yükleyebiliriz. Eğer bilgisayarınızda yüklü olmayan bir paket varsa install.packages() fonksiyonunu kullanarak yükleyebilirsiniz. Bu yazı için toplamda iki paket kullanacağız: terra ve geodata. Ben mekânsal vektör işlerinde genellikle sf paktini kullanıyorum ancak bu sefer hem vektör hem de raster veriler için terra paketini kullanacağız. Mülki idare sınırları ve sayısal yükseklik modellerine erişmek için de geodata paketini kullanacağız. Bu paket de raster, terra, dismo gibi birçok önemli R paketini yazan Robert Hijmans’ın yazdığı bir paket.\n\n# paketleri R'a yukle\nlibs &lt;- c(\n  \"terra\",  # mekansal raster ve vektor verileri islemek icin, {raster}'in halefi\n  \"geodata\" # bazi mekansal verilere erismek icin \n)\nsapply(libs, require, character.only = TRUE)\n\n  terra geodata \n   TRUE    TRUE"
  },
  {
    "objectID": "posts/dem/dem.html#dem-verisinin-indirilmesi",
    "href": "posts/dem/dem.html#dem-verisinin-indirilmesi",
    "title": "R ile Topografik Veri İndirme - DEM Verisi İndirme ve Görselleştirme",
    "section": "2. DEM verisinin indirilmesi",
    "text": "2. DEM verisinin indirilmesi\nDEM verisinden önceki yazıda kısaca bahsetmiştim. Tekrardan hatırlamakta fayda var. DEM (Digital Elevation Model), kısaca, yeryüzünün yükseklik bilgisini sayısal olarak temsil eden modele verilen isim. Her bir grid için, sahip olduğu yükseklik verisini barındıran bu veri, topografik ve hidrolojik birçok analizde sıklıkla kullanılıyor.\nBu yazıda SRTM verisini, geodata paketini kullanarak indireceğiz. Bu paket ile, GADM, SRTM, Worldclim, OSM gibi birçok farklı veriyi kolaylıkla indirebiliriz.\nÖncelikle paketin içerdiği fonksiyonlara bir bakalım.\n\nls(\"package:geodata\")\n\n [1] \"bio_oracle\"          \"cmip6_tile\"          \"cmip6_world\"        \n [4] \"country_codes\"       \"crop_calendar_sacks\" \"crop_monfreda\"      \n [7] \"crop_spam\"           \"cropland\"            \"elevation_30s\"      \n[10] \"elevation_3s\"        \"elevation_global\"    \"footprint\"          \n[13] \"gadm\"                \"geodata_path\"        \"landcover\"          \n[16] \"monfredaCrops\"       \"osm\"                 \"population\"         \n[19] \"rice_calendar\"       \"sacksCrops\"          \"soil_af\"            \n[22] \"soil_af_elements\"    \"soil_af_isda\"        \"soil_af_water\"      \n[25] \"soil_world\"          \"soil_world_vsi\"      \"sp_genus\"           \n[28] \"sp_occurrence\"       \"sp_occurrence_split\" \"spamCrops\"          \n[31] \"travel_time\"         \"world\"               \"worldclim_country\"  \n[34] \"worldclim_global\"    \"worldclim_tile\"     \n\n\nBizim işimize yarayacak fonkiyon elevation_30s(). Ülke kodu için country argümanını, DEM verisinin Türkiye sınırlarına göre maskelemek için mask argümanını ve veriyi kaydeceğimiz yer için ise path argümanını kullanıyoruz. Ben tempfile() fonksiyonu ile geçici bir dosya oluşturdum. Dilerseniz yereldeki herhangi bir dizine de kaydedebilirsiniz.\n\ndem &lt;- elevation_30s(country = \"TUR\", mask = TRUE, path = tempfile())\ndem\n\nclass       : SpatRaster \ndimensions  : 792, 2340, 1  (nrow, ncol, nlyr)\nresolution  : 0.008333333, 0.008333333  (x, y)\nextent      : 25.5, 45, 35.7, 42.3  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : TUR_elv_msk.tif \nname        : TUR_elv_msk \nmin value   :         -42 \nmax value   :        4972 \n\n\n\nnrow(dem) * ncol(dem)\n\n[1] 1853280\n\n\nVerinin çıktısında birçok temel bilgiye erişebiliriz. Gördüğünüz gibi veri SpatRaster sınıfında; satır sayısı 792, sütun sayısı 2340 olan, toplamda 1853280 hücreden oluşuyor. Çözünürlüğü 0.008333333 derece, yani yaklaşık 1 km diyebiliriz. Verinin extent’i Türkiye sınırlarını kapsıyor. Minimum değer -42 m, iken maksimum değer 4972 m. Yaklaşık 1 km çözünürlüğe sahip olduğunu düşündüğümüzde neredeyse Ağrı Dağı’nın 5137 metrelik rakımını yakalıyormuş. Gayet iyi.\nVerinin minimum değeri -42 metreden başladığı için reclassify etmek istiyorum. 0’dan küçük olan tüm değerleri 0’a eşitleyeceğim. Bunu terra paketi içindeki classify() fonksiyonu ile yapabiliriz.\n\ndem &lt;- classify(\n  dem, \n  rcl = matrix(c(-Inf, 0, 0), ncol = 3, byrow = TRUE)\n)\ndem\n\nclass       : SpatRaster \ndimensions  : 792, 2340, 1  (nrow, ncol, nlyr)\nresolution  : 0.008333333, 0.008333333  (x, y)\nextent      : 25.5, 45, 35.7, 42.3  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource(s)   : memory\nvarname     : TUR_elv_msk \nname        : TUR_elv_msk \nmin value   :           0 \nmax value   :        4972 \n\n\nGördüğünüz gibi minimum değer artık 0’dan başlıyor.\nŞimdi basitçe görselleştirelim.\n\nplot(dem)\n\n\n\n\n\n\n\n\nBu hâliyle bile çok güzel görünüyor.\nŞimdi de eğim, bakı ve hillshade’i hesaplıyoruz.\n\nslp &lt;- terrain(dem, \"slope\", unit = \"radian\")\nasp &lt;- terrain(dem, \"aspect\", unit = \"radian\")\nhillshade &lt;- shade(\n  slp,\n  asp,\n  angle = 45,\n  direction = 300,\n  normalize = TRUE\n)\n\nBir bakalım nasıl görünüyorlar. Çoğu durumda plot(data) yeterince iyi sonuç veriyor ancak daha yüksek çözünürlüklü bir görüntü için maxcell argümanını değiştireceğim. İşlem biraz yavaşlayabilir.\n\nplot(slp, maxcell = prod(dim(slp))) # sutun ve satir sayisini carpip hucre sayisini hesapliyorum\n\n\n\n\n\n\n\n\n\nplot(asp, maxcell = prod(dim(asp)))\n\n\n\n\n\n\n\n\n\nplot(hillshade, maxcell = prod(dim(hillshade)), col = grey(0:100/100))\n\n\n\n\n\n\n\n\nŞimdi de mülki idare sınırları için GADM verilerini çekelim. GADM, Türkiye için sınır çözünürlüğü yüksek olan bir veri değil ancak yüksek sınır doğruluğu gerekmeyen işler için gayet kullanışlı. Tüm dünya verisini çekip, Türkiye’nin ve komşuların bir kısmının extent’inin koordinatlarına göre kırpıyoruz.\n\nadm &lt;- world(resolution = 1, path = tempfile())\next &lt;- vect(ext(c(25.7, 45.3, 35.5, 42.5)), crs = \"EPSG:4326\")\nadm &lt;- crop(adm, ext)\nadm\n\n class       : SpatVector \n geometry    : polygons \n dimensions  : 10, 2  (geometries, attributes)\n extent      : 25.7, 45.3, 35.5, 42.5  (xmin, xmax, ymin, ymax)\n coord. ref. : +proj=longlat +datum=WGS84 +no_defs \n names       : GID_0     NAME_0\n type        : &lt;chr&gt;      &lt;chr&gt;\n values      :   ARM    Armenia\n                 AZE Azerbaijan\n                 BGR   Bulgaria\n\n\n\nplot(adm)"
  },
  {
    "objectID": "posts/dem/dem.html#verinin-görselleştirilmesi",
    "href": "posts/dem/dem.html#verinin-görselleştirilmesi",
    "title": "R ile Topografik Veri İndirme - DEM Verisi İndirme ve Görselleştirme",
    "section": "3. Verinin görselleştirilmesi",
    "text": "3. Verinin görselleştirilmesi\nŞimdi güzel bir harita oluşturalım. Yazının en karmaşık kısmı nuhtemelen burası olacak. Daha önceki yazılarda, R’da grafikler için oldukça standart bir iş akışı sağlayan ggplot2 paketini kullanarak haritalar çizmiştik. Bu sefer ise base R kullanacağız. base R ile grafik çizdiğimiz zaman ilkin gözümüze yeterince iyi gelmeyebilir ancak biraz tecrübe kazandığımızda ne kadar esnek ve işlevsel olduğunu görebiliriz. ggplot2 kadar standart, karmaşık grafiklerde onun kadar kolay bir iş akışı sunmuyor ancak düşünüldüğü kadar zor değil ve çok daha esnek bir yapıya sahip. Neredeyse dilediğimiz hemen her şeyi çizebiliriz. Bazen çok az satırla bile süper işler çıkabiliyor. Bu aşamada yanlış ya da eksik yaptığım şeyler olursa yorum yapmaktan çekinmeyin lütfen.\nÖncelikle Türkiye ve çevre ülkelerin sınırlarının olduğu bir altlık harita çizelim.\n\nplot(\n  adm,                       # veri\n  lwd = 0.8,                 # cizgi kalinligi\n  xlim = c(26.1, 44.9),      # x eksinin sinirladigimiz aralik\n  ylim = c(35.7, 42.3),      # y eksinin sinirladigimiz aralik\n  border = \"grey\",           # poligon sinirlarinin rengi\n  background = \"lightblue\",  # deniz alanlarinin rengi\n  col = \"white\",             # kara alanlarinin rengi\n  axes = TRUE,               # eksenleri cizmek icin\n  mar = c(2, 1, 0, 1),       # plot'un marginlerini belirtiyor (alt, sol, ust, sag)\n  las = 1                    # en cok gozden kacan nokta, y eksenininin etiketlerini yatay yapiyor\n)\n\n\n\n\n\n\n\n\nŞimdi de kabartmasıyla ve konturlarıyla beraber topografik haritamızı çizelim.\n\nplot(\n  hillshade,\n  col = grey(0:100 / 100),\n  mar = c(5, 1, 0, 1),\n  maxcell = prod(dim(hillshade)),\n  legend = FALSE # rakimin lejantini cizmek icin burada cizmiyoruz\n)\nplot(\n  dem,\n  col = terrain.colors(255),\n  alpha = 0.5,\n  maxcell = prod(dim(dem)),\n  add = TRUE,               # ilk plot'un uzerine cizebilmek icin\n  legend = TRUE,\n  plg = list(               # terra::plot'ta lejant ayarlari icin\n    loc = \"bottom\",         # lejanti asagiya ciz\n    size = c(0.6, 0.7),     # lejant boyutu\n    cex = 0.8,              # yazi boyutu\n    at = seq(0, 4500, 500), # lejant etiketleri\n    tic = \"out\",            # lejanttaki cizgilerin pozisyonu\n    title = \"m\",            # baslik\n    title.cex = 0.8         # baslik boyutu\n  )\n)\ncontour(\n  dem, \n  lwd = 0.35, \n  labcex = 0.38, # label boyutu\n  col = scales::alpha(\"grey40\", 0.7), \n  add = TRUE\n)\n\n\n\n\n\n\n\n\nŞimdi de iki haritayı birleştirelim. Ancak bu sefer konturu çizmeyeceğim.\n\nplot.new() # yeni bir plot baslatmak icin\npar(family = \"OpenSans\") # font \nplot(\n  adm,\n  lwd = 0.8,\n  xlim = c(26.1, 44.9),\n  ylim = c(35.7, 42.3),\n  border = \"grey\",\n  background = \"lightblue\",\n  col = \"white\",\n  mar = c(5, 1, 0, 1),\n  axes = TRUE,\n  las = 1\n)\nplot(\n  hillshade,\n  col = grey(0:100/100),\n  maxcell = prod(dim(hillshade)),\n  legend = FALSE,\n  add = TRUE\n)\nplot(\n  dem,\n  col = terrain.colors(255),\n  alpha = 0.5,\n  maxcell = prod(dim(dem)),\n  add = TRUE,\n  legend = TRUE,\n  plg = list(\n    loc = \"bottom\",\n    size = c(0.6, 0.7),\n    cex = 0.8,\n    at = seq(0, 4500, 500),\n    tic = \"out\",\n    title = \"Rakım [m]\",\n    title.cex = 0.8\n  )\n)\nplot(adm, border = \"grey\", lwd = 0.8, add = TRUE) # sinirlari vurgulu cizmek icin tekrar ekledim\n\n\n\n\n\n\n\n\nFena olmadı. :) Biraz daha uğraşla daha iyi haritalar elde edilebilir. Özellikle de göl ve nehir katmanları eklenirse güzel olacaktır.\nŞimdi de Türkiye rakımının dağılımına bir bakalım. Bunun için histogram çizeceğim.\n\nplot.new()\npar(\n  mar = c(5, 5, 1, 1),\n  mgp = c(3.6, 1, 0),         # etiket uzakligini ayarliyoruz\n  las = 1, \n  family = \"OpenSans\", \n  bty = \"l\",                  # box'ın tipini L seklinde yapmak icin\n  cex.lab = 1.3,\n  xpd = NA                    # etiketi grafik sinirlari disina tasimaya izin verir\n)\nhist(\n  dem,\n  xlab = \"Rakım [m]\",         # x ekseninin etiketi\n  ylab = \"Sıklık\",            # y ekseninin etiketi\n  main = \"\",                  # baslik icin. \"\" bos yaparak basligi cizmiyorum\n  col = \"orange\",\n  breaks = seq(0, 4972, 100), # grafigin kirilimlari\n  density = 50                # kutularin icindeki tarama cizgisinin yogunlugu\n)\naxis(                         # x eksenindeki kucuk tikleri cizmek icin\n  side = 1,                   # alttaki x eksenine cizmek icin\n  at = seq(0, 4972, 100),     # kirilimlar\n  tck = -0.030 / 4,           # tik boyutu kucuk olsun\n  labels = FALSE              # etiket olmamasi icin\n) \nbox()                         # eksenlere kutu cizmek icin\n\n\n\n\n\n\n\n\nGrafik, sağa çarpık bir dağılım sergiliyor. Ortalama rakımın 1132 metre olduğu Türkiye’yi iyi temsil eden bir grafik oldu.\nBir sonraki yazıda görüşürüz.\nBilimle ve huzurla kalınız!"
  },
  {
    "objectID": "posts/dem2/dem2.html",
    "href": "posts/dem2/dem2.html",
    "title": "R ile Topografik Veri İndirme 2 - DEM Verisi İndirme ve Görselleştirme",
    "section": "",
    "text": "Merhabalar, blogun yeni yazısına hoş geldiniz. Takıldığınız ve anlamadığınız yerler olursa lütfen yorum yapmaya çekinmeyiniz. Ayrıca katkılarınızı ve eleştirilerinizi de bekliyorum. Keyifli okumalar.\nGeçtiğimiz hafta, üzerinden uzunca bir zaman geçtikten sonra, blogun üçüncü yazısını yayımlamıştım. geodata paketini kullanarak SRTM verisi indirmiş ve görselleştirmiştim. SRTM, orijinal olarak 30 metre çözünürlüklü bir veri ancak geodata paketi bu veriyi, maksimum 30 arc second (yaklaşık 1 km) çözünürlüklü olarak sağlıyor. Bu çözünürlük, çoğu görselleştirme ve ekolojik modelleme çalışması için oldukça yeterli, özellikle de Türkiye gibi büyük coğrafyalarda çalıştığımız zaman. Ancak çalışmamızın konusu, amacı ya da çalışma alanının boyutuna göre, topografyayı daha iyi temsil edecek, daha yüksek çözünürlüklü verilere ihtiyaç duyabiliriz. Geçtiğimiz yazının devamı niteliğindeki bu yazıda, R kullanarak yüksek çözünürlüklü SRTM verilerine nasıl erişebileceğimizi anlatacağım. Yüksek çözünürlü veri indireceğimiz için Türkiye ölçeğinde veri indirmek ve o veriyi işlemek daha fazla zaman alacaktır. Bu sebeple bu yazı İzmir ölçeğinde olacak."
  },
  {
    "objectID": "posts/dem2/dem2.html#yazının-akışı",
    "href": "posts/dem2/dem2.html#yazının-akışı",
    "title": "R ile Topografik Veri İndirme 2 - DEM Verisi İndirme ve Görselleştirme",
    "section": "Yazının Akışı",
    "text": "Yazının Akışı\n\nPaketlerin yüklenmesi\nDEM verisinin indirilmesi\nVerinin görselleştirilmesi"
  },
  {
    "objectID": "posts/dem2/dem2.html#paketlerin-yüklenmesi",
    "href": "posts/dem2/dem2.html#paketlerin-yüklenmesi",
    "title": "R ile Topografik Veri İndirme 2 - DEM Verisi İndirme ve Görselleştirme",
    "section": "1. Paketlerin yüklenmesi",
    "text": "1. Paketlerin yüklenmesi\nBu yazı için 4 paket kullanacağız. Mekânsal vektör veriler için sf, raster veriler için terra, mülki idare sınırları için yine rgeoboundaries ve interaktif görselleştirme için de mapview paketini kullanacağız. Bu yazıdaki yeni paketimiz elevatr. DEM verilerine erişmek için oldukça pratik bir paket.\n\nlibrary(sf)\nlibrary(terra)\nlibrary(elevatr)\nlibrary(rgeoboundaries)\nlibrary(mapview)"
  },
  {
    "objectID": "posts/dem2/dem2.html#dem-verisinin-indirilmesi",
    "href": "posts/dem2/dem2.html#dem-verisinin-indirilmesi",
    "title": "R ile Topografik Veri İndirme 2 - DEM Verisi İndirme ve Görselleştirme",
    "section": "2. DEM verisinin indirilmesi",
    "text": "2. DEM verisinin indirilmesi\nelevatr paketini kullanarak birden fazla kaynaktan (SRTM, ALOS 3D, Amazon) veri indirmek mümkün. Yukarıda da bahsettiğim gibi bu yazıda SRTM verisi indireceğiz. Bunun için ilk olarak Türkiye mülki idare sınırı verisini indirelim.\n\ntr_il &lt;- gb_adm1(\"TUR\")\ntr_il\n\nSimple feature collection with 81 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25.66545 ymin: 35.80768 xmax: 44.81766 ymax: 42.1048\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   shapeGroup shapeType      shapeName shapeISO                 shapeID\n1         TUR      ADM1          Adana    TR-01 25984515B95172477822815\n2         TUR      ADM1       Adıyaman    TR-02 25984515B90872828599679\n3         TUR      ADM1 Afyonkarahisar    TR-03 25984515B26209284550223\n4         TUR      ADM1           Ağrı    TR-04 25984515B39003465173278\n5         TUR      ADM1         Amasya    TR-05 25984515B32583172380009\n6         TUR      ADM1        Antalya    TR-07 25984515B97476213604692\n7         TUR      ADM1         Artvin    TR-08  25984515B1602304411378\n8         TUR      ADM1          Aydın    TR-09 25984515B63739470532168\n9         TUR      ADM1      Balıkesir    TR-10 25984515B55384476443375\n10        TUR      ADM1         Ankara    TR-06 25984515B47806653651907\n   shapeCanonical                       geometry\n1        province MULTIPOLYGON (((35.38791 36...\n2        province MULTIPOLYGON (((37.861 37.4...\n3        province MULTIPOLYGON (((30.48061 38...\n4        province MULTIPOLYGON (((43.77542 39...\n5        province MULTIPOLYGON (((36.3878 40....\n6        province MULTIPOLYGON (((30.42781 36...\n7        province MULTIPOLYGON (((41.87016 40...\n8        province MULTIPOLYGON (((27.33197 37...\n9        province MULTIPOLYGON (((26.7224 39....\n10       province MULTIPOLYGON (((31.96673 38...\n\n\n\nplot(st_geometry(tr_il))\n\n\n\n\nŞekil 1: Türkiye mülki idare sınırları.\n\n\n\n\nŞimdi de İzmir sınırlarını çekelim.\n\nizm &lt;- tr_il[tr_il$shapeName == \"İzmir\", ]\nizm\n\nSimple feature collection with 1 feature and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 26.19417 ymin: 37.81523 xmax: 28.49308 ymax: 39.38549\nGeodetic CRS:  WGS 84\n   shapeGroup shapeType shapeName shapeISO                 shapeID\n41        TUR      ADM1     İzmir    TR-35 25984515B59477790330217\n   shapeCanonical                       geometry\n41       province MULTIPOLYGON (((28.48507 38...\n\n\n\nplot(st_geometry(izm))\n\n\n\n\nŞekil 2: İzmir mülki idare sınırları.\n\n\n\n\nBir de interaktif olarak kontrol edelim.\n\nmapview(izm)\n\n\n\nŞekil 3: İzmir mülki idare sınırları.\n\n\nİzmir sınırları hazır olduğuna göre DEM verisini indirebiliriz.\nelevatr paketi, “aws” hariç diğer kaynaklardan veri indirmek için OpenTopography API’sini kullanıyor. Bunun için siteye üye olmalı ve API Key oluşturmalısınız. Bu, işlem ücretsiz ve oldukça basit. Sonrasında set_opentopo_key() fonksiyonunu kullanarak key’inizi girmelisiniz. Ardından R oturumunu yeniden başlattığınızda verilere erişebilirsiniz.\nİzmir sınırlarını kullanarak DEM verisini indirmek için get_elev_raster() fonksiyonunu kullanacağız. İzmir DEM verisini indirmek için locations = izm, yüksek çözünürlüklü SRTM verisi için src = \"gl1\" ve veriyi İzmir sınırlarına göre kırpmak için de clip = \"locations\" argümanını kullanacağız.\n\ndem &lt;- get_elev_raster(izm, src = \"gl1\", clip = \"locations\")\n\n\ndem\n\nclass      : RasterLayer \ndimensions : 5653, 8276, 46784228  (nrow, ncol, ncell)\nresolution : 0.0002777778, 0.0002777778  (x, y)\nextent     : 26.19431, 28.49319, 37.81514, 39.38542  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs \nsource     : memory\nnames      : file90761e26a847 \nvalues     : -25, 2148  (min, max)\n\n\n\nplot(dem)\n\n\n\n\nŞekil 4: İzmir topografya haritası, raster paketinin varsayılan plot() fonksiyonu.\n\n\n\n\nYüksek çözünürlüklü DEM verisini indirdik. Gördüğünüz gibi veri RasterLayer sınıfında. Bunun sebebi elevatr paketinin hâlen raster paketini kullanması. Veriyi terra’nın SpatRaster sınıfına çeviriyorum. Ardından da bir önceki yazıdaki gibi reclassify edip, 0’dan küçük olan tüm değerleri 0’a eşitleyeceğim. Bunu terra paketi içindeki classify() fonksiyonu ile yapabiliriz.\n\ndem &lt;- rast(dem)\ndem &lt;- classify(\n  dem, \n  rcl = matrix(c(-Inf, 0, 0), ncol = 3, byrow = TRUE)\n)\ndem\n\nclass       : SpatRaster \ndimensions  : 5653, 8276, 1  (nrow, ncol, nlyr)\nresolution  : 0.0002777778, 0.0002777778  (x, y)\nextent      : 26.19431, 28.49319, 37.81514, 39.38542  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=longlat +datum=WGS84 +no_defs \nsource(s)   : memory\nname        : file90761e26a847 \nmin value   :                0 \nmax value   :             2148 \n\n\n\nplot(dem)\n\n\n\n\nŞekil 5: İzmir topografya haritası, terra paketinin varsayılan plot() fonksiyonu.\n\n\n\n\nŞimdi de görselleştirmeye geçebiliriz."
  },
  {
    "objectID": "posts/dem2/dem2.html#verinin-görselleştirilmesi",
    "href": "posts/dem2/dem2.html#verinin-görselleştirilmesi",
    "title": "R ile Topografik Veri İndirme 2 - DEM Verisi İndirme ve Görselleştirme",
    "section": "3. Verinin görselleştirilmesi",
    "text": "3. Verinin görselleştirilmesi\nVeriyi görselleştirmek için yine base R kullanacağım. Bu sefer daha iyi bir renk paleti seçiyor ve kuzey oku ile ölçek ekliyorum.\n\nbreaks &lt;- seq(0, 2150, 10)                                                    # kirilimlari onceden belirliyoruz\n\npar(family = \"Montserrat\", cex = 1.4)                                         # font ailesi ve boyutu\nplot(\n  dem,                                                                        # raster veri \n  breaks = breaks,                                                            # kirilimlar\n  type = \"continuous\",                                                        # kirilimlari manuel belirledigimiz icin lejanti manuel olarak cont. yapmamiz gerekiyor\n  col = tidyterra::hypso.colors(                                              # tidyterra paketiyle palet seciyorum  \n    length(breaks) - 1,                                                       # renk sayisinin kırilim boyutundan bir az olmasi icin\n    palette = \"wiki-schwarzwald-cont\"\n  ), \n  las = 1,                                                                    # y eksenindeki yaziların yatay olmasi icin\n  maxcell = prod(dim(dem)),                                                   # maksimum cozunurlukte cizmek icin\n  plg = list(at = seq(0, 2100, 250), tic = \"out\"),                            # lejant ayarlari\n  mar = c(0.5, 1.5, 0, 4)                                                     # marjin \n)\nplot(st_geometry(izm), add = TRUE)                                            # izmir sinirlari\nnorth(c(26.35, 39.2), type = 1, label = expression(bold(\"KUZEY\")), lwd = 1.2) # kuzey oku\nsbar(10, \"bottomleft\", below = \"km\", adj = c(0.5, -1), lonlat = TRUE)         # olcek\nmtext(\"Veri: SRTM\", side = 1, adj = 0.99, line = 1.7)                         # kaynak eklemek icin\n\n\n\n\nŞekil 6: İzmir topografya haritası, terra ve base plot ile topografya haritası.\n\n\n\n\nGeçenki yazıdaki histogramı şimdi de İzmir için çizelim, rakımın İzmir’deki dağılımına bir bakalım.\n\nbreaks &lt;- seq(0, 2150, 50)\n\npar(\n  mar = c(5, 5.2, 1, 1),\n  mgp = c(3.6, 0.7, 0),                                                     # etiket uzakligini ayarliyoruz\n  las = 1, \n  family = \"Montserrat\", \n  bty = \"l\",                                                                # box'ın tipini L seklinde yapmak icin\n  cex.lab = 1.2,\n  xpd = NA                                                                  # etiketi grafik sinirlari disina tasimaya izin verir\n)\nhist(dem, xlab = \"Rakım [m]\", ylab = \"Sıklık\", main = \"\", breaks = breaks)  # histogram\naxis(side = 1, at = breaks, tck = -0.030 / 4, labels = FALSE)               # x eksenindeki kucuk tikler\nbox()                                                                       # eksenlere kutu cizmek icin\n\n\n\n\nŞekil 7: İzmir’de rakımın dağılımı.\n\n\n\n\nGrafik, sergilediği sağa çarpık dağılımla İzmir’in bir kıyı kenti olduğunu oldukça net bir şekilde gösteriyor.\nBir sonraki yazıda görüşürüz.\nBilimle ve huzurla kalınız!"
  }
]